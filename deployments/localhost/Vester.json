{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractCantBeUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositAmountTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EndTimeNotCompatible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourStream",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateCantBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemableBalanceIsLowerThenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StartTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamDoesntExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "MessageRecieved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "SentMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStream",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "redeemableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "timePassed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewNextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "viewStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ratesPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12d8903bf25351bfe15576a24eed2dd9e7020bc776eebff08dae5b14aade6d41",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4003202",
    "logsBloom": "0x
    "blockHash": "0x88b410f025d9da15c0a23d032544a13f2542352defe45c3a97fb8af69b73f7c9",
    "transactionHash": "0x12d8903bf25351bfe15576a24eed2dd9e7020bc776eebff08dae5b14aade6d41",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x12d8903bf25351bfe15576a24eed2dd9e7020bc776eebff08dae5b14aade6d41",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x88b410f025d9da15c0a23d032544a13f2542352defe45c3a97fb8af69b73f7c9"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4003202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b5e1b0c0bf21c9d3f5845ce69a4fee3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractCantBeUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndTimeNotCompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourStream\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateCantBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemableBalanceIsLowerThenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamDoesntExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"MessageRecieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"SentMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"redeemableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"timePassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewNextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"viewStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratesPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vester.sol\":\"Vester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Vester.sol\":{\"content\":\"\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./lzApp/NonblockingLzApp.sol\\\";\\n\\n\\nerror EndTimeNotCompatible();\\nerror WithdrawAmountToLarge();\\nerror NotYourStream();\\nerror RedeemableBalanceIsLowerThenAmount();\\nerror AmountIsZero();\\nerror StartTimePassed();\\nerror DepositAmountTooLow();\\nerror ContractCantBeUser();\\nerror StreamDoesntExist();\\nerror NoTokensLeft();\\nerror RateCantBeZero();\\n\\ncontract Vester is NonblockingLzApp {\\n    // State variables\\n    uint256 private nextStreamId = 1;\\n\\n\\n    struct Stream {\\n        uint256 streamId;\\n        address user;\\n        address sender;\\n        uint256 depositAmount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address tokenAddress;\\n        uint256 ratesPerSecond;\\n        uint256 balance;\\n        bool active;\\n    }\\n\\n    mapping(uint256 => Stream) private streams;\\n\\n\\n    //Events\\n    event StreamCreated(uint256 streamId);\\n    event WithdrawFromStream(uint256 streamId, address user, uint256 amount);\\n    event MessageRecieved(uint streamId);\\n    event SentMessage(uint16 chainId);\\n\\n\\n    // Modifiers\\n    modifier StreamExists(uint256 streamId) {\\n        if(!streams[streamId].active) revert StreamDoesntExist();\\n        _;\\n    }\\n    \\n    constructor(address _endpoint) NonblockingLzApp(_endpoint) {}\\n    \\n    // Functions\\n    function createStream(address tokenAddress, address user, uint256 startTime, uint256 endTime, uint256 depositAmount) public {\\n        if(block.timestamp < startTime) revert StartTimePassed();\\n        if(depositAmount <= 0) revert DepositAmountTooLow();\\n        if(user == address(this)) revert ContractCantBeUser();\\n        \\n        uint256 streamId = nextStreamId;\\n        nextStreamId = nextStreamId + 1;\\n        uint duration = (endTime - startTime);\\n        if(duration > depositAmount) revert RateCantBeZero();\\n        if(depositAmount % duration != 0) revert EndTimeNotCompatible();\\n        uint ratesPerSecond = (depositAmount / duration);\\n        streams[streamId] = Stream({\\n            streamId: streamId,\\n            user: user,\\n            sender: msg.sender,\\n            depositAmount: depositAmount,\\n            startTime: startTime,\\n            endTime: endTime,\\n            tokenAddress: tokenAddress,\\n            ratesPerSecond: ratesPerSecond,\\n            balance: depositAmount,\\n            active: true\\n        });\\n        emit StreamCreated(streamId);  \\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), depositAmount);\\n    }\\n    \\n    function withdrawFromStream(uint256 streamId, uint amount) StreamExists(streamId) public {\\n        Stream memory stream = streams[streamId];\\n        if(msg.sender != stream.user) revert NotYourStream();\\n        uint256 balance = redeemableBalance(streamId);\\n        if(amount > balance) revert RedeemableBalanceIsLowerThenAmount();\\n        if(amount <= 0) revert AmountIsZero();\\n\\n        if(stream.balance == 0) {\\n            delete streams[streamId];\\n            revert NoTokensLeft();\\n        }\\n\\n        streams[streamId].balance = (stream.depositAmount - amount);\\n        IERC20(stream.tokenAddress).transfer(stream.user, amount);\\n        emit WithdrawFromStream(streamId, stream.user, amount);\\n\\n\\n\\n    }\\n\\n    // View functions\\n\\n    function timePassed(uint256 streamId) public view returns (uint256) {\\n        Stream memory stream = streams[streamId];\\n        if(block.timestamp <= stream.startTime) return 0;\\n        if(block.timestamp < stream.endTime) return block.timestamp - stream.startTime;\\n        return stream.endTime - stream.startTime;\\n    }\\n\\n    function redeemableBalance(uint256 streamId) public view returns (uint256) {\\n        Stream memory stream = streams[streamId];\\n        uint _timePassed = timePassed(streamId);\\n        return (stream.ratesPerSecond * _timePassed);\\n    }\\n\\n    function viewNextStreamId() public view returns (uint256) {\\n        return nextStreamId;\\n    }\\n\\n    function viewStream(uint256 streamId) StreamExists(streamId) public view returns (\\n        address user,\\n        address sender,\\n        uint256 depositAmount,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address tokenAddress,\\n        uint256 ratesPerSecond,\\n        uint256 balance,\\n        bool active) {\\n        \\n        user = streams[streamId].user;\\n        sender = streams[streamId].sender;\\n        depositAmount = streams[streamId].depositAmount;\\n        startTime = streams[streamId].startTime;\\n        endTime = streams[streamId].endTime;\\n        tokenAddress = streams[streamId].tokenAddress;\\n        ratesPerSecond = streams[streamId].ratesPerSecond;\\n        balance = streams[streamId].balance;\\n        active = streams[streamId].active;\\n    }\\n\\n    function sendMessage(uint16 _dstChainId, address, uint streamId) public payable {\\n        bytes memory payload = abi.encode(streamId);\\n        uint16 version = 1;\\n        uint gasForDestinationLzReceive = 10;\\n        bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\\n        _lzSend( // {value: messageFee} will be paid out of this contract!\\n            _dstChainId, // destination chainId\\n            payload, // abi.encode()'ed bytes\\n            payable(address(this)), // (msg.sender will be this contract) refund address (LayerZero will refund any extra gas back to caller of send()\\n            address(0x0), // future param, unused for this example\\n            adapterParams, // v1 adapterParams, specify custom destination gas qty\\n            msg.value\\n        );\\n        emit SentMessage(_dstChainId);\\n    }\\n\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64, /*_nonce*/\\n        bytes memory _payload\\n    ) internal override {\\n        // When received a message decode the _payload to get chainId\\n\\n        uint _chainId = abi.decode(_payload, (uint));\\n        emit MessageRecieved(_chainId);\\n    }\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x0681bc55677261faff2455d70a653a10ffe45ba626a53a781fba00aee6277a2b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0xb0f5dd5442f7f6dc3cba510c3170e5304de918b082ac658a2935433e80fefb66\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe377e661a587f855100ae6bbc9159e9aa279a99b632b445b3b9fb45a347da63a\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x42d10415d035529fcdff738d6542844ad58124b4e1da5a8ff92d6ddd8bf96513\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"../util/BytesLib.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\r\\n    address public precrime;\\r\\n\\r\\n    event SetPrecrime(address precrime);\\r\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\r\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\r\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\r\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\r\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\r\\n    // this function set the trusted path for the cross-chain communication\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _path;\\r\\n        emit SetTrustedRemote(_srcChainId, _path);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\r\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\r\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\r\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\r\\n    }\\r\\n\\r\\n    function setPrecrime(address _precrime) external onlyOwner {\\r\\n        precrime = _precrime;\\r\\n        emit SetPrecrime(_precrime);\\r\\n    }\\r\\n\\r\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\r\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\r\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\r\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a0e6fda04384621ecabd287f3ccd00be6e30e364f5e059dbbe17504a4450529\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    using ExcessivelySafeCall for address;\\r\\n\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\r\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\r\\n        // try-catch all errors/exceptions\\r\\n        if (!success) {\\r\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3e92d8f58ecd5b89a7e2e5baa71dbd505dbdececba63fd36731b4e5e417b8bb7\",\"license\":\"MIT\"},\"contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(\\r\\n        bytes memory _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n        // Store the length of the first bytes array at the beginning of\\r\\n        // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n        // Maintain a memory counter for the current write location in the\\r\\n        // temp bytes array by adding the 32 bytes for the array length to\\r\\n        // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n        // Stop copying when the memory counter reaches the length of the\\r\\n        // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n            // Initialize a copy counter to the start of the _preBytes data,\\r\\n            // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n            // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n            // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Add the length of _postBytes to the current length of tempBytes\\r\\n        // and store it as the new length in the first 32 bytes of the\\r\\n        // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n        // Move the memory counter back from a multiple of 0x20 to the\\r\\n        // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n        // Stop copying when the memory counter reaches the new combined\\r\\n        // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Update the free-memory pointer by padding our last write location\\r\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n        // next 32 byte block, then round down to the nearest multiple of\\r\\n        // 32. If the sum of the length of the two arrays is zero then add\\r\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(0x40, and(\\r\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n            not(31) // Round down to the nearest 32 bytes.\\r\\n            ))\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n        // of the array. (We don't need to use the offset into the slot\\r\\n        // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Arrays of 31 bytes or less have an even value in their slot,\\r\\n        // while longer arrays have an odd value. The actual length is\\r\\n        // the slot divided by two for odd values, and the lowest order\\r\\n        // byte divided by two for even values.\\r\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n        // two to get the length. If the slot is odd, bitwise and the slot\\r\\n        // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n            // Since the new array still fits in the slot, we just need to\\r\\n            // update the contents of the slot.\\r\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                _preBytes.slot,\\r\\n                // all the modifications to the slot are inside this\\r\\n                // next block\\r\\n                add(\\r\\n                // we can just add to the slot contents because the\\r\\n                // bytes we want to change are the LSBs\\r\\n                fslot,\\r\\n                add(\\r\\n                mul(\\r\\n                div(\\r\\n                // load the bytes from memory\\r\\n                mload(add(_postBytes, 0x20)),\\r\\n                // zero all bytes to the right\\r\\n                exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n                ),\\r\\n                // increase length by the double of the memory\\r\\n                // bytes length\\r\\n                mul(mlength, 2)\\r\\n                )\\r\\n                )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n            // The stored value fits in the slot, but the combined value\\r\\n            // will exceed it.\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // The contents of the _postBytes array start 32 bytes into\\r\\n            // the structure. Our first read should obtain the `submod`\\r\\n            // bytes that can fit into the unused space in the last word\\r\\n            // of the stored array. To get this, we read 32 bytes starting\\r\\n            // from `submod`, so the data we read overlaps with the array\\r\\n            // contents by `submod` bytes. Masking the lowest-order\\r\\n            // `submod` bytes allows us to add that value directly to the\\r\\n            // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                sc,\\r\\n                add(\\r\\n                and(\\r\\n                fslot,\\r\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                ),\\r\\n                and(mload(mc), mask)\\r\\n                )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n            // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // Copy over the first `submod` bytes of the new data as in\\r\\n            // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n            // The first word of the slice result is potentially a partial\\r\\n            // word read from the original array. To read it, we calculate\\r\\n            // the length of that partial word and start copying that many\\r\\n            // bytes into the array. The first word we copy will start with\\r\\n            // data we don't care about, but the last `lengthmod` bytes will\\r\\n            // land at the beginning of the contents of the new array. When\\r\\n            // we're done copying, we overwrite the full first word with\\r\\n            // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n            // The multiplication in the next line is necessary\\r\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n            // the following copy loop was copying the origin's length\\r\\n            // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                // The multiplication in the next line has the same exact purpose\\r\\n                // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n            //update free-memory pointer\\r\\n            //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n            //zero out the 32 bytes slice we are about to return\\r\\n            //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                // the next line is the loop condition:\\r\\n                // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                    // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(\\r\\n        bytes storage _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n        // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                    // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                        // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                    // cb is a circuit breaker in the for loop since there's\\r\\n                    //  no said feature for inline assembly loops\\r\\n                    // cb = 1 - don't breaker\\r\\n                    // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                    // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                            // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x31ec222b26bcf66817cb409f0128d16c632b28729ad3a694f47b10e8ad0cb984\",\"license\":\"Unlicense\"},\"contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary ExcessivelySafeCall {\\r\\n    uint256 constant LOW_28_MASK =\\r\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            0, // ether value\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeStaticCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal view returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := staticcall(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps function selectors in encoded contract calls\\r\\n     * @dev Allows reuse of encoded calldata for functions with identical\\r\\n     * argument types but different names. It simply swaps out the first 4 bytes\\r\\n     * for the new selector. This function modifies memory in place, and should\\r\\n     * only be used with caution.\\r\\n     * @param _newSelector The new 4-byte selector\\r\\n     * @param _buf The encoded contract args\\r\\n     */\\r\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\r\\n    internal\\r\\n    pure\\r\\n    {\\r\\n        require(_buf.length >= 4);\\r\\n        uint256 _mask = LOW_28_MASK;\\r\\n        assembly {\\r\\n        // load the first word of\\r\\n            let _word := mload(add(_buf, 0x20))\\r\\n        // mask out the top 4 bytes\\r\\n        // /x\\r\\n            _word := and(_word, _mask)\\r\\n            _word := or(_newSelector, _word)\\r\\n            mstore(add(_buf, 0x20), _word)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7255c64d2c753f4c52c9654fa052744cd9ee368ac9bd41334d43f1ab83c9d01d\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405260016005553480156200001657600080fd5b506040516200490c3803806200490c83398181016040528101906200003c9190620001d1565b80806200005e620000526200009b60201b60201c565b620000a360201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505062000203565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000199826200016c565b9050919050565b620001ab816200018c565b8114620001b757600080fd5b50565b600081519050620001cb81620001a0565b92915050565b600060208284031215620001ea57620001e962000167565b5b6000620001fa84828501620001ba565b91505092915050565b6080516146bc620002506000396000818161070501528181610d8d01528181610e2301528181610f9701528181611ae401528181611b93015281816124470152612a0501526146bc6000f3fe6080604052600436106101c15760003560e01c80639072d416116100f7578063cfed919911610095578063eb8d72b711610064578063eb8d72b714610637578063ecda286514610660578063f2fde38b1461069d578063f5ecbdbc146106c6576101c1565b8063cfed919914610599578063d1deba1f146105d6578063df2a5b3b146105f2578063e2939c761461061b576101c1565b8063a6c3d165116100d1578063a6c3d165146104f3578063b353aaa71461051c578063baf3292d14610547578063cbed8b9c14610570576101c1565b80639072d41614610446578063950c8a741461048b5780639f38369a146104b6576101c1565b80635b8c41e6116101645780637533d7881161013e5780637533d788146103785780637a9b2c6c146103b55780638cfd8f5c146103de5780638da5cb5b1461041b576101c1565b80635b8c41e6146102fb57806366ad5c8a14610338578063715018a614610361576101c1565b806310ddb137116101a057806310ddb137146102415780633495f8381461026a5780633d8b38f61461029557806342d65a8d146102d2576101c1565b80621d3567146101c657806306eb2dd3146101ef57806307e0db1714610218575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e89190612c2d565b610703565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612d68565b610959565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612de3565b610d83565b005b34801561024d57600080fd5b5061026860048036038101906102639190612de3565b610e19565b005b34801561027657600080fd5b5061027f610eaf565b60405161028c9190612e1f565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612e3a565b610eb9565b6040516102c99190612eb5565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190612e3a565b610f8d565b005b34801561030757600080fd5b50610322600480360381019061031d9190613011565b611029565b60405161032f9190613099565b60405180910390f35b34801561034457600080fd5b5061035f600480360381019061035a9190612c2d565b611071565b005b34801561036d57600080fd5b50610376611182565b005b34801561038457600080fd5b5061039f600480360381019061039a9190612de3565b611196565b6040516103ac9190613133565b60405180910390f35b3480156103c157600080fd5b506103dc60048036038101906103d79190613155565b611236565b005b3480156103ea57600080fd5b5061040560048036038101906104009190613195565b6116fc565b6040516104129190612e1f565b60405180910390f35b34801561042757600080fd5b50610430611721565b60405161043d91906131e4565b60405180910390f35b34801561045257600080fd5b5061046d600480360381019061046891906131ff565b61174a565b6040516104829998979695949392919061322c565b60405180910390f35b34801561049757600080fd5b506104a061190f565b6040516104ad91906131e4565b60405180910390f35b3480156104c257600080fd5b506104dd60048036038101906104d89190612de3565b611935565b6040516104ea9190613133565b60405180910390f35b3480156104ff57600080fd5b5061051a60048036038101906105159190612e3a565b611a4e565b005b34801561052857600080fd5b50610531611ae2565b60405161053e9190613318565b60405180910390f35b34801561055357600080fd5b5061056e60048036038101906105699190613333565b611b06565b005b34801561057c57600080fd5b5061059760048036038101906105929190613360565b611b89565b005b3480156105a557600080fd5b506105c060048036038101906105bb91906131ff565b611c2b565b6040516105cd9190612e1f565b60405180910390f35b6105f060048036038101906105eb9190612c2d565b611dfe565b005b3480156105fe57600080fd5b50610619600480360381019061061491906133e8565b612041565b005b6106356004803603810190610630919061343b565b612105565b005b34801561064357600080fd5b5061065e60048036038101906106599190612e3a565b6121aa565b005b34801561066c57600080fd5b50610687600480360381019061068291906131ff565b61221d565b6040516106949190612e1f565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190613333565b6123c0565b005b3480156106d257600080fd5b506106ed60048036038101906106e8919061348e565b612443565b6040516106fa9190613133565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107426124f4565b73ffffffffffffffffffffffffffffffffffffffff1614610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90613552565b60405180910390fd5b6000600160008861ffff1661ffff16815260200190815260200160002080546107c0906135a1565b80601f01602080910402602001604051908101604052809291908181526020018280546107ec906135a1565b80156108395780601f1061080e57610100808354040283529160200191610839565b820191906000526020600020905b81548152906001019060200180831161081c57829003601f168201915b50505050509050805186869050148015610854575060008151115b801561087d575080805190602001208686604051610873929190613602565b6040518091039020145b6108bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b39061368d565b60405180910390fd5b6109508787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506124fc565b50505050505050565b82421015610993576040517f5696032300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081116109cd576040517f55fcd02700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a32576040517f690c666f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060055490506001600554610a4891906136dc565b60058190555060008484610a5c9190613710565b905082811115610a98576040517fb717128900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008184610aa69190613773565b14610add576040517f2510db1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008184610aeb91906137a4565b90506040518061014001604052808481526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018781526020018681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200182815260200185815260200160011515815250600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff0219169083151502179055509050507f3056c83b2054f047a75323e4d65d14a30d96f2cecc797f0b03f3eeb786db876183604051610cf09190612e1f565b60405180910390a18773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610d35939291906137d5565b6020604051808303816000875af1158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190613838565b505050505050505050565b610d8b612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b8152600401610de49190613874565b600060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b5050505050565b610e21612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b8152600401610e7a9190613874565b600060405180830381600087803b158015610e9457600080fd5b505af1158015610ea8573d6000803e3d6000fd5b5050505050565b6000600554905090565b600080600160008661ffff1661ffff1681526020019081526020016000208054610ee2906135a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0e906135a1565b8015610f5b5780601f10610f3057610100808354040283529160200191610f5b565b820191906000526020600020905b815481529060010190602001808311610f3e57829003601f168201915b505050505090508383604051610f72929190613602565b60405180910390208180519060200120149150509392505050565b610f95612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b8152600401610ff2939291906138bc565b600060405180830381600087803b15801561100c57600080fd5b505af1158015611020573d6000803e3d6000fd5b50505050505050565b60046020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050505481565b3073ffffffffffffffffffffffffffffffffffffffff166110906124f4565b73ffffffffffffffffffffffffffffffffffffffff16146110e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dd90613960565b60405180910390fd5b61117a8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126df565b505050505050565b61118a612661565b6111946000612735565b565b600160205280600052604060002060009150905080546111b5906135a1565b80601f01602080910402602001604051908101604052809291908181526020018280546111e1906135a1565b801561122e5780601f106112035761010080835404028352916020019161122e565b820191906000526020600020905b81548152906001019060200180831161121157829003601f168201915b505050505081565b816006600082815260200190815260200160002060090160009054906101000a900460ff16611291576040517fd42039af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006006600085815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff1615151515815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611476576040517f62af6ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006114818561221d565b9050808411156114bd576040517f6752d5ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084116114f7576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008261010001510361160557600660008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905560058201600090556006820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600782016000905560088201600090556009820160006101000a81549060ff021916905550506040517f7364ba1700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8382606001516116159190613710565b60066000878152602001908152602001600020600801819055508160c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360200151866040518363ffffffff1660e01b8152600401611672929190613980565b6020604051808303816000875af1158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190613838565b507f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c858360200151866040516116ed939291906139a9565b60405180910390a15050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000806000806000806000896006600082815260200190815260200160002060090160009054906101000a900460ff166117b3576040517fd42039af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008c815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169950600660008c815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169850600660008c8152602001908152602001600020600301549750600660008c8152602001908152602001600020600401549650600660008c8152602001908152602001600020600501549550600660008c815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450600660008c8152602001908152602001600020600701549350600660008c8152602001908152602001600020600801549250600660008c815260200190815260200160002060090160009054906101000a900460ff169150509193959799909294969850565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600160008461ffff1661ffff168152602001908152602001600020805461195f906135a1565b80601f016020809104026020016040519081016040528092919081815260200182805461198b906135a1565b80156119d85780601f106119ad576101008083540402835291602001916119d8565b820191906000526020600020905b8154815290600101906020018083116119bb57829003601f168201915b505050505090506000815103611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a90613a2c565b60405180910390fd5b611a46600060148351611a369190613710565b836127f99092919063ffffffff16565b915050919050565b611a56612661565b818130604051602001611a6b93929190613a94565b604051602081830303815290604052600160008561ffff1661ffff1681526020019081526020016000209081611aa19190613c60565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611ad5939291906138bc565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b0e612661565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b81604051611b7e91906131e4565b60405180910390a150565b611b91612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c86868686866040518663ffffffff1660e01b8152600401611bf2959493929190613d32565b600060405180830381600087803b158015611c0c57600080fd5b505af1158015611c20573d6000803e3d6000fd5b505050505050505050565b6000806006600084815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905080608001514211611dbd576000915050611df9565b8060a00151421015611de157806080015142611dd99190613710565b915050611df9565b80608001518160a00151611df59190613710565b9150505b919050565b6000600460008861ffff1661ffff1681526020019081526020016000208686604051611e2b929190613602565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b8103611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613df2565b60405180910390fd5b808383604051611eb7929190613602565b604051809103902014611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690613e84565b60405180910390fd5b6000801b600460008961ffff1661ffff1681526020019081526020016000208787604051611f2e929190613602565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550611ff98787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126df565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612030959493929190613eb3565b60405180910390a150505050505050565b612049612661565b6000811161208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208390613f4d565b60405180910390fd5b80600260008561ffff1661ffff16815260200190815260200160002060008461ffff1661ffff168152602001908152602001600020819055507f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac08383836040516120f893929190613f6d565b60405180910390a1505050565b6000816040516020016121189190612e1f565b60405160208183030381529060405290506000600190506000600a90506000828260405160200161214a929190613ffb565b604051602081830303815290604052905061216a87853060008534612917565b7f49c140b92f7071fd58962ee8f69e637c41fec6470af0b2d3d329c0a7002d5ad9876040516121999190613874565b60405180910390a150505050505050565b6121b2612661565b8181600160008661ffff1661ffff16815260200190815260200160002091826121dc929190614032565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051612210939291906138bc565b60405180910390a1505050565b6000806006600084815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905060006123a584611c2b565b9050808260e001516123b79190614102565b92505050919050565b6123c8612661565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242e906141b6565b60405180910390fd5b61244081612735565b50565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc868630866040518563ffffffff1660e01b81526004016124a494939291906141d6565b600060405180830381865afa1580156124c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124ea919061428b565b9050949350505050565b600033905090565b6000806125a85a60966366ad5c8a60e01b8989898960405160240161252494939291906142d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff16612aa2909392919063ffffffff16565b9150915081612659578280519060200120600460008861ffff1661ffff168152602001908152602001600020866040516125e29190614358565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c868686868560405161265095949392919061436f565b60405180910390a15b505050505050565b6126696124f4565b73ffffffffffffffffffffffffffffffffffffffff16612687611721565b73ffffffffffffffffffffffffffffffffffffffff16146126dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d490614423565b60405180910390fd5b565b6000818060200190518101906126f59190614458565b90507fb10278cb5bbfff6eb667756c618a9af66912713089f06fc19b723d116bcd4604816040516127269190612e1f565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606081601f8361280991906136dc565b101561284a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612841906144d1565b60405180910390fd5b818361285691906136dc565b84511015612899576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128909061453d565b60405180910390fd5b60608215600081146128ba576040519150600082526020820160405261290b565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128f857805183526020830192506020810190506128db565b50868552601f19601f8301166040525050505b50809150509392505050565b6000600160008861ffff1661ffff168152602001908152602001600020805461293f906135a1565b80601f016020809104026020016040519081016040528092919081815260200182805461296b906135a1565b80156129b85780601f1061298d576101008083540402835291602001916129b8565b820191906000526020600020905b81548152906001019060200180831161299b57829003601f168201915b505050505090506000815103612a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fa906145cf565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031008389848a8a8a8a6040518863ffffffff1660e01b8152600401612a6796959493929190614610565b6000604051808303818588803b158015612a8057600080fd5b505af1158015612a94573d6000803e3d6000fd5b505050505050505050505050565b6000606060008060008661ffff1667ffffffffffffffff811115612ac957612ac8612ee6565b5b6040519080825280601f01601f191660200182016040528015612afb5781602001600182028036833780820191505090505b50905060008087516020890160008d8df191503d925086831115612b1d578692505b828152826000602083013e81819450945050505094509492505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b612b6581612b4e565b8114612b7057600080fd5b50565b600081359050612b8281612b5c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612bad57612bac612b88565b5b8235905067ffffffffffffffff811115612bca57612bc9612b8d565b5b602083019150836001820283011115612be657612be5612b92565b5b9250929050565b600067ffffffffffffffff82169050919050565b612c0a81612bed565b8114612c1557600080fd5b50565b600081359050612c2781612c01565b92915050565b60008060008060008060808789031215612c4a57612c49612b44565b5b6000612c5889828a01612b73565b965050602087013567ffffffffffffffff811115612c7957612c78612b49565b5b612c8589828a01612b97565b95509550506040612c9889828a01612c18565b935050606087013567ffffffffffffffff811115612cb957612cb8612b49565b5b612cc589828a01612b97565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cff82612cd4565b9050919050565b612d0f81612cf4565b8114612d1a57600080fd5b50565b600081359050612d2c81612d06565b92915050565b6000819050919050565b612d4581612d32565b8114612d5057600080fd5b50565b600081359050612d6281612d3c565b92915050565b600080600080600060a08688031215612d8457612d83612b44565b5b6000612d9288828901612d1d565b9550506020612da388828901612d1d565b9450506040612db488828901612d53565b9350506060612dc588828901612d53565b9250506080612dd688828901612d53565b9150509295509295909350565b600060208284031215612df957612df8612b44565b5b6000612e0784828501612b73565b91505092915050565b612e1981612d32565b82525050565b6000602082019050612e346000830184612e10565b92915050565b600080600060408486031215612e5357612e52612b44565b5b6000612e6186828701612b73565b935050602084013567ffffffffffffffff811115612e8257612e81612b49565b5b612e8e86828701612b97565b92509250509250925092565b60008115159050919050565b612eaf81612e9a565b82525050565b6000602082019050612eca6000830184612ea6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f1e82612ed5565b810181811067ffffffffffffffff82111715612f3d57612f3c612ee6565b5b80604052505050565b6000612f50612b3a565b9050612f5c8282612f15565b919050565b600067ffffffffffffffff821115612f7c57612f7b612ee6565b5b612f8582612ed5565b9050602081019050919050565b82818337600083830152505050565b6000612fb4612faf84612f61565b612f46565b905082815260208101848484011115612fd057612fcf612ed0565b5b612fdb848285612f92565b509392505050565b600082601f830112612ff857612ff7612b88565b5b8135613008848260208601612fa1565b91505092915050565b60008060006060848603121561302a57613029612b44565b5b600061303886828701612b73565b935050602084013567ffffffffffffffff81111561305957613058612b49565b5b61306586828701612fe3565b925050604061307686828701612c18565b9150509250925092565b6000819050919050565b61309381613080565b82525050565b60006020820190506130ae600083018461308a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156130ee5780820151818401526020810190506130d3565b60008484015250505050565b6000613105826130b4565b61310f81856130bf565b935061311f8185602086016130d0565b61312881612ed5565b840191505092915050565b6000602082019050818103600083015261314d81846130fa565b905092915050565b6000806040838503121561316c5761316b612b44565b5b600061317a85828601612d53565b925050602061318b85828601612d53565b9150509250929050565b600080604083850312156131ac576131ab612b44565b5b60006131ba85828601612b73565b92505060206131cb85828601612b73565b9150509250929050565b6131de81612cf4565b82525050565b60006020820190506131f960008301846131d5565b92915050565b60006020828403121561321557613214612b44565b5b600061322384828501612d53565b91505092915050565b600061012082019050613242600083018c6131d5565b61324f602083018b6131d5565b61325c604083018a612e10565b6132696060830189612e10565b6132766080830188612e10565b61328360a08301876131d5565b61329060c0830186612e10565b61329d60e0830185612e10565b6132ab610100830184612ea6565b9a9950505050505050505050565b6000819050919050565b60006132de6132d96132d484612cd4565b6132b9565b612cd4565b9050919050565b60006132f0826132c3565b9050919050565b6000613302826132e5565b9050919050565b613312816132f7565b82525050565b600060208201905061332d6000830184613309565b92915050565b60006020828403121561334957613348612b44565b5b600061335784828501612d1d565b91505092915050565b60008060008060006080868803121561337c5761337b612b44565b5b600061338a88828901612b73565b955050602061339b88828901612b73565b94505060406133ac88828901612d53565b935050606086013567ffffffffffffffff8111156133cd576133cc612b49565b5b6133d988828901612b97565b92509250509295509295909350565b60008060006060848603121561340157613400612b44565b5b600061340f86828701612b73565b935050602061342086828701612b73565b925050604061343186828701612d53565b9150509250925092565b60008060006060848603121561345457613453612b44565b5b600061346286828701612b73565b935050602061347386828701612d1d565b925050604061348486828701612d53565b9150509250925092565b600080600080608085870312156134a8576134a7612b44565b5b60006134b687828801612b73565b94505060206134c787828801612b73565b93505060406134d887828801612d1d565b92505060606134e987828801612d53565b91505092959194509250565b600082825260208201905092915050565b7f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000600082015250565b600061353c601e836134f5565b915061354782613506565b602082019050919050565b6000602082019050818103600083015261356b8161352f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135b957607f821691505b6020821081036135cc576135cb613572565b5b50919050565b600081905092915050565b60006135e983856135d2565b93506135f6838584612f92565b82840190509392505050565b600061360f8284866135dd565b91508190509392505050565b7f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006136776026836134f5565b91506136828261361b565b604082019050919050565b600060208201905081810360008301526136a68161366a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e782612d32565b91506136f283612d32565b925082820190508082111561370a576137096136ad565b5b92915050565b600061371b82612d32565b915061372683612d32565b925082820390508181111561373e5761373d6136ad565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061377e82612d32565b915061378983612d32565b92508261379957613798613744565b5b828206905092915050565b60006137af82612d32565b91506137ba83612d32565b9250826137ca576137c9613744565b5b828204905092915050565b60006060820190506137ea60008301866131d5565b6137f760208301856131d5565b6138046040830184612e10565b949350505050565b61381581612e9a565b811461382057600080fd5b50565b6000815190506138328161380c565b92915050565b60006020828403121561384e5761384d612b44565b5b600061385c84828501613823565b91505092915050565b61386e81612b4e565b82525050565b60006020820190506138896000830184613865565b92915050565b600061389b83856130bf565b93506138a8838584612f92565b6138b183612ed5565b840190509392505050565b60006040820190506138d16000830186613865565b81810360208301526138e481848661388f565b9050949350505050565b7f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201527f204c7a4170700000000000000000000000000000000000000000000000000000602082015250565b600061394a6026836134f5565b9150613955826138ee565b604082019050919050565b600060208201905081810360008301526139798161393d565b9050919050565b600060408201905061399560008301856131d5565b6139a26020830184612e10565b9392505050565b60006060820190506139be6000830186612e10565b6139cb60208301856131d5565b6139d86040830184612e10565b949350505050565b7f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000600082015250565b6000613a16601d836134f5565b9150613a21826139e0565b602082019050919050565b60006020820190508181036000830152613a4581613a09565b9050919050565b60008160601b9050919050565b6000613a6482613a4c565b9050919050565b6000613a7682613a59565b9050919050565b613a8e613a8982612cf4565b613a6b565b82525050565b6000613aa18285876135dd565b9150613aad8284613a7d565b601482019150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613b207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ae3565b613b2a8683613ae3565b95508019841693508086168417925050509392505050565b6000613b5d613b58613b5384612d32565b6132b9565b612d32565b9050919050565b6000819050919050565b613b7783613b42565b613b8b613b8382613b64565b848454613af0565b825550505050565b600090565b613ba0613b93565b613bab818484613b6e565b505050565b5b81811015613bcf57613bc4600082613b98565b600181019050613bb1565b5050565b601f821115613c1457613be581613abe565b613bee84613ad3565b81016020851015613bfd578190505b613c11613c0985613ad3565b830182613bb0565b50505b505050565b600082821c905092915050565b6000613c3760001984600802613c19565b1980831691505092915050565b6000613c508383613c26565b9150826002028217905092915050565b613c69826130b4565b67ffffffffffffffff811115613c8257613c81612ee6565b5b613c8c82546135a1565b613c97828285613bd3565b600060209050601f831160018114613cca5760008415613cb8578287015190505b613cc28582613c44565b865550613d2a565b601f198416613cd886613abe565b60005b82811015613d0057848901518255600182019150602085019450602081019050613cdb565b86831015613d1d5784890151613d19601f891682613c26565b8355505b6001600288020188555050505b505050505050565b6000608082019050613d476000830188613865565b613d546020830187613865565b613d616040830186612e10565b8181036060830152613d7481848661388f565b90509695505050505050565b7f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201527f6167650000000000000000000000000000000000000000000000000000000000602082015250565b6000613ddc6023836134f5565b9150613de782613d80565b604082019050919050565b60006020820190508181036000830152613e0b81613dcf565b9050919050565b7f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e6e6021836134f5565b9150613e7982613e12565b604082019050919050565b60006020820190508181036000830152613e9d81613e61565b9050919050565b613ead81612bed565b82525050565b6000608082019050613ec86000830188613865565b8181036020830152613edb81868861388f565b9050613eea6040830185613ea4565b613ef7606083018461308a565b9695505050505050565b7f4c7a4170703a20696e76616c6964206d696e4761730000000000000000000000600082015250565b6000613f376015836134f5565b9150613f4282613f01565b602082019050919050565b60006020820190508181036000830152613f6681613f2a565b9050919050565b6000606082019050613f826000830186613865565b613f8f6020830185613865565b613f9c6040830184612e10565b949350505050565b60008160f01b9050919050565b6000613fbc82613fa4565b9050919050565b613fd4613fcf82612b4e565b613fb1565b82525050565b6000819050919050565b613ff5613ff082612d32565b613fda565b82525050565b60006140078285613fc3565b6002820191506140178284613fe4565b6020820191508190509392505050565b600082905092915050565b61403c8383614027565b67ffffffffffffffff81111561405557614054612ee6565b5b61405f82546135a1565b61406a828285613bd3565b6000601f8311600181146140995760008415614087578287013590505b6140918582613c44565b8655506140f9565b601f1984166140a786613abe565b60005b828110156140cf578489013582556001820191506020850194506020810190506140aa565b868310156140ec57848901356140e8601f891682613c26565b8355505b6001600288020188555050505b50505050505050565b600061410d82612d32565b915061411883612d32565b925082820261412681612d32565b9150828204841483151761413d5761413c6136ad565b5b5092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006141a06026836134f5565b91506141ab82614144565b604082019050919050565b600060208201905081810360008301526141cf81614193565b9050919050565b60006080820190506141eb6000830187613865565b6141f86020830186613865565b61420560408301856131d5565b6142126060830184612e10565b95945050505050565b600061422e61422984612f61565b612f46565b90508281526020810184848401111561424a57614249612ed0565b5b6142558482856130d0565b509392505050565b600082601f83011261427257614271612b88565b5b815161428284826020860161421b565b91505092915050565b6000602082840312156142a1576142a0612b44565b5b600082015167ffffffffffffffff8111156142bf576142be612b49565b5b6142cb8482850161425d565b91505092915050565b60006080820190506142e96000830187613865565b81810360208301526142fb81866130fa565b905061430a6040830185613ea4565b818103606083015261431c81846130fa565b905095945050505050565b6000614332826130b4565b61433c81856135d2565b935061434c8185602086016130d0565b80840191505092915050565b60006143648284614327565b915081905092915050565b600060a0820190506143846000830188613865565b818103602083015261439681876130fa565b90506143a56040830186613ea4565b81810360608301526143b781856130fa565b905081810360808301526143cb81846130fa565b90509695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061440d6020836134f5565b9150614418826143d7565b602082019050919050565b6000602082019050818103600083015261443c81614400565b9050919050565b60008151905061445281612d3c565b92915050565b60006020828403121561446e5761446d612b44565b5b600061447c84828501614443565b91505092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b60006144bb600e836134f5565b91506144c682614485565b602082019050919050565b600060208201905081810360008301526144ea816144ae565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b60006145276011836134f5565b9150614532826144f1565b602082019050919050565b600060208201905081810360008301526145568161451a565b9050919050565b7f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060008201527f61207472757374656420736f7572636500000000000000000000000000000000602082015250565b60006145b96030836134f5565b91506145c48261455d565b604082019050919050565b600060208201905081810360008301526145e8816145ac565b9050919050565b60006145fa82612cd4565b9050919050565b61460a816145ef565b82525050565b600060c0820190506146256000830189613865565b818103602083015261463781886130fa565b9050818103604083015261464b81876130fa565b905061465a6060830186614601565b61466760808301856131d5565b81810360a083015261467981846130fa565b905097965050505050505056fea2646970667358221220f94acbb945950c3c0df4a2ac842fa56307ef60551dc900cff7397b22e0230f7a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c80639072d416116100f7578063cfed919911610095578063eb8d72b711610064578063eb8d72b714610637578063ecda286514610660578063f2fde38b1461069d578063f5ecbdbc146106c6576101c1565b8063cfed919914610599578063d1deba1f146105d6578063df2a5b3b146105f2578063e2939c761461061b576101c1565b8063a6c3d165116100d1578063a6c3d165146104f3578063b353aaa71461051c578063baf3292d14610547578063cbed8b9c14610570576101c1565b80639072d41614610446578063950c8a741461048b5780639f38369a146104b6576101c1565b80635b8c41e6116101645780637533d7881161013e5780637533d788146103785780637a9b2c6c146103b55780638cfd8f5c146103de5780638da5cb5b1461041b576101c1565b80635b8c41e6146102fb57806366ad5c8a14610338578063715018a614610361576101c1565b806310ddb137116101a057806310ddb137146102415780633495f8381461026a5780633d8b38f61461029557806342d65a8d146102d2576101c1565b80621d3567146101c657806306eb2dd3146101ef57806307e0db1714610218575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e89190612c2d565b610703565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612d68565b610959565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612de3565b610d83565b005b34801561024d57600080fd5b5061026860048036038101906102639190612de3565b610e19565b005b34801561027657600080fd5b5061027f610eaf565b60405161028c9190612e1f565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612e3a565b610eb9565b6040516102c99190612eb5565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190612e3a565b610f8d565b005b34801561030757600080fd5b50610322600480360381019061031d9190613011565b611029565b60405161032f9190613099565b60405180910390f35b34801561034457600080fd5b5061035f600480360381019061035a9190612c2d565b611071565b005b34801561036d57600080fd5b50610376611182565b005b34801561038457600080fd5b5061039f600480360381019061039a9190612de3565b611196565b6040516103ac9190613133565b60405180910390f35b3480156103c157600080fd5b506103dc60048036038101906103d79190613155565b611236565b005b3480156103ea57600080fd5b5061040560048036038101906104009190613195565b6116fc565b6040516104129190612e1f565b60405180910390f35b34801561042757600080fd5b50610430611721565b60405161043d91906131e4565b60405180910390f35b34801561045257600080fd5b5061046d600480360381019061046891906131ff565b61174a565b6040516104829998979695949392919061322c565b60405180910390f35b34801561049757600080fd5b506104a061190f565b6040516104ad91906131e4565b60405180910390f35b3480156104c257600080fd5b506104dd60048036038101906104d89190612de3565b611935565b6040516104ea9190613133565b60405180910390f35b3480156104ff57600080fd5b5061051a60048036038101906105159190612e3a565b611a4e565b005b34801561052857600080fd5b50610531611ae2565b60405161053e9190613318565b60405180910390f35b34801561055357600080fd5b5061056e60048036038101906105699190613333565b611b06565b005b34801561057c57600080fd5b5061059760048036038101906105929190613360565b611b89565b005b3480156105a557600080fd5b506105c060048036038101906105bb91906131ff565b611c2b565b6040516105cd9190612e1f565b60405180910390f35b6105f060048036038101906105eb9190612c2d565b611dfe565b005b3480156105fe57600080fd5b50610619600480360381019061061491906133e8565b612041565b005b6106356004803603810190610630919061343b565b612105565b005b34801561064357600080fd5b5061065e60048036038101906106599190612e3a565b6121aa565b005b34801561066c57600080fd5b50610687600480360381019061068291906131ff565b61221d565b6040516106949190612e1f565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190613333565b6123c0565b005b3480156106d257600080fd5b506106ed60048036038101906106e8919061348e565b612443565b6040516106fa9190613133565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107426124f4565b73ffffffffffffffffffffffffffffffffffffffff1614610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90613552565b60405180910390fd5b6000600160008861ffff1661ffff16815260200190815260200160002080546107c0906135a1565b80601f01602080910402602001604051908101604052809291908181526020018280546107ec906135a1565b80156108395780601f1061080e57610100808354040283529160200191610839565b820191906000526020600020905b81548152906001019060200180831161081c57829003601f168201915b50505050509050805186869050148015610854575060008151115b801561087d575080805190602001208686604051610873929190613602565b6040518091039020145b6108bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b39061368d565b60405180910390fd5b6109508787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506124fc565b50505050505050565b82421015610993576040517f5696032300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081116109cd576040517f55fcd02700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a32576040517f690c666f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060055490506001600554610a4891906136dc565b60058190555060008484610a5c9190613710565b905082811115610a98576040517fb717128900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008184610aa69190613773565b14610add576040517f2510db1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008184610aeb91906137a4565b90506040518061014001604052808481526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018781526020018681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200182815260200185815260200160011515815250600660008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff0219169083151502179055509050507f3056c83b2054f047a75323e4d65d14a30d96f2cecc797f0b03f3eeb786db876183604051610cf09190612e1f565b60405180910390a18773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610d35939291906137d5565b6020604051808303816000875af1158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190613838565b505050505050505050565b610d8b612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b8152600401610de49190613874565b600060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b5050505050565b610e21612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b8152600401610e7a9190613874565b600060405180830381600087803b158015610e9457600080fd5b505af1158015610ea8573d6000803e3d6000fd5b5050505050565b6000600554905090565b600080600160008661ffff1661ffff1681526020019081526020016000208054610ee2906135a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0e906135a1565b8015610f5b5780601f10610f3057610100808354040283529160200191610f5b565b820191906000526020600020905b815481529060010190602001808311610f3e57829003601f168201915b505050505090508383604051610f72929190613602565b60405180910390208180519060200120149150509392505050565b610f95612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b8152600401610ff2939291906138bc565b600060405180830381600087803b15801561100c57600080fd5b505af1158015611020573d6000803e3d6000fd5b50505050505050565b60046020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050505481565b3073ffffffffffffffffffffffffffffffffffffffff166110906124f4565b73ffffffffffffffffffffffffffffffffffffffff16146110e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dd90613960565b60405180910390fd5b61117a8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126df565b505050505050565b61118a612661565b6111946000612735565b565b600160205280600052604060002060009150905080546111b5906135a1565b80601f01602080910402602001604051908101604052809291908181526020018280546111e1906135a1565b801561122e5780601f106112035761010080835404028352916020019161122e565b820191906000526020600020905b81548152906001019060200180831161121157829003601f168201915b505050505081565b816006600082815260200190815260200160002060090160009054906101000a900460ff16611291576040517fd42039af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006006600085815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff1615151515815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611476576040517f62af6ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006114818561221d565b9050808411156114bd576040517f6752d5ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084116114f7576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008261010001510361160557600660008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905560058201600090556006820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600782016000905560088201600090556009820160006101000a81549060ff021916905550506040517f7364ba1700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8382606001516116159190613710565b60066000878152602001908152602001600020600801819055508160c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360200151866040518363ffffffff1660e01b8152600401611672929190613980565b6020604051808303816000875af1158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190613838565b507f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c858360200151866040516116ed939291906139a9565b60405180910390a15050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000806000806000806000896006600082815260200190815260200160002060090160009054906101000a900460ff166117b3576040517fd42039af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008c815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169950600660008c815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169850600660008c8152602001908152602001600020600301549750600660008c8152602001908152602001600020600401549650600660008c8152602001908152602001600020600501549550600660008c815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450600660008c8152602001908152602001600020600701549350600660008c8152602001908152602001600020600801549250600660008c815260200190815260200160002060090160009054906101000a900460ff169150509193959799909294969850565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600160008461ffff1661ffff168152602001908152602001600020805461195f906135a1565b80601f016020809104026020016040519081016040528092919081815260200182805461198b906135a1565b80156119d85780601f106119ad576101008083540402835291602001916119d8565b820191906000526020600020905b8154815290600101906020018083116119bb57829003601f168201915b505050505090506000815103611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a90613a2c565b60405180910390fd5b611a46600060148351611a369190613710565b836127f99092919063ffffffff16565b915050919050565b611a56612661565b818130604051602001611a6b93929190613a94565b604051602081830303815290604052600160008561ffff1661ffff1681526020019081526020016000209081611aa19190613c60565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611ad5939291906138bc565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b0e612661565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b81604051611b7e91906131e4565b60405180910390a150565b611b91612661565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c86868686866040518663ffffffff1660e01b8152600401611bf2959493929190613d32565b600060405180830381600087803b158015611c0c57600080fd5b505af1158015611c20573d6000803e3d6000fd5b505050505050505050565b6000806006600084815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905080608001514211611dbd576000915050611df9565b8060a00151421015611de157806080015142611dd99190613710565b915050611df9565b80608001518160a00151611df59190613710565b9150505b919050565b6000600460008861ffff1661ffff1681526020019081526020016000208686604051611e2b929190613602565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b8103611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613df2565b60405180910390fd5b808383604051611eb7929190613602565b604051809103902014611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690613e84565b60405180910390fd5b6000801b600460008961ffff1661ffff1681526020019081526020016000208787604051611f2e929190613602565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550611ff98787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126df565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612030959493929190613eb3565b60405180910390a150505050505050565b612049612661565b6000811161208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208390613f4d565b60405180910390fd5b80600260008561ffff1661ffff16815260200190815260200160002060008461ffff1661ffff168152602001908152602001600020819055507f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac08383836040516120f893929190613f6d565b60405180910390a1505050565b6000816040516020016121189190612e1f565b60405160208183030381529060405290506000600190506000600a90506000828260405160200161214a929190613ffb565b604051602081830303815290604052905061216a87853060008534612917565b7f49c140b92f7071fd58962ee8f69e637c41fec6470af0b2d3d329c0a7002d5ad9876040516121999190613874565b60405180910390a150505050505050565b6121b2612661565b8181600160008661ffff1661ffff16815260200190815260200160002091826121dc929190614032565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051612210939291906138bc565b60405180910390a1505050565b6000806006600084815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905060006123a584611c2b565b9050808260e001516123b79190614102565b92505050919050565b6123c8612661565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242e906141b6565b60405180910390fd5b61244081612735565b50565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc868630866040518563ffffffff1660e01b81526004016124a494939291906141d6565b600060405180830381865afa1580156124c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124ea919061428b565b9050949350505050565b600033905090565b6000806125a85a60966366ad5c8a60e01b8989898960405160240161252494939291906142d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff16612aa2909392919063ffffffff16565b9150915081612659578280519060200120600460008861ffff1661ffff168152602001908152602001600020866040516125e29190614358565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c868686868560405161265095949392919061436f565b60405180910390a15b505050505050565b6126696124f4565b73ffffffffffffffffffffffffffffffffffffffff16612687611721565b73ffffffffffffffffffffffffffffffffffffffff16146126dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d490614423565b60405180910390fd5b565b6000818060200190518101906126f59190614458565b90507fb10278cb5bbfff6eb667756c618a9af66912713089f06fc19b723d116bcd4604816040516127269190612e1f565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606081601f8361280991906136dc565b101561284a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612841906144d1565b60405180910390fd5b818361285691906136dc565b84511015612899576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128909061453d565b60405180910390fd5b60608215600081146128ba576040519150600082526020820160405261290b565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128f857805183526020830192506020810190506128db565b50868552601f19601f8301166040525050505b50809150509392505050565b6000600160008861ffff1661ffff168152602001908152602001600020805461293f906135a1565b80601f016020809104026020016040519081016040528092919081815260200182805461296b906135a1565b80156129b85780601f1061298d576101008083540402835291602001916129b8565b820191906000526020600020905b81548152906001019060200180831161299b57829003601f168201915b505050505090506000815103612a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fa906145cf565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031008389848a8a8a8a6040518863ffffffff1660e01b8152600401612a6796959493929190614610565b6000604051808303818588803b158015612a8057600080fd5b505af1158015612a94573d6000803e3d6000fd5b505050505050505050505050565b6000606060008060008661ffff1667ffffffffffffffff811115612ac957612ac8612ee6565b5b6040519080825280601f01601f191660200182016040528015612afb5781602001600182028036833780820191505090505b50905060008087516020890160008d8df191503d925086831115612b1d578692505b828152826000602083013e81819450945050505094509492505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b612b6581612b4e565b8114612b7057600080fd5b50565b600081359050612b8281612b5c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612bad57612bac612b88565b5b8235905067ffffffffffffffff811115612bca57612bc9612b8d565b5b602083019150836001820283011115612be657612be5612b92565b5b9250929050565b600067ffffffffffffffff82169050919050565b612c0a81612bed565b8114612c1557600080fd5b50565b600081359050612c2781612c01565b92915050565b60008060008060008060808789031215612c4a57612c49612b44565b5b6000612c5889828a01612b73565b965050602087013567ffffffffffffffff811115612c7957612c78612b49565b5b612c8589828a01612b97565b95509550506040612c9889828a01612c18565b935050606087013567ffffffffffffffff811115612cb957612cb8612b49565b5b612cc589828a01612b97565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cff82612cd4565b9050919050565b612d0f81612cf4565b8114612d1a57600080fd5b50565b600081359050612d2c81612d06565b92915050565b6000819050919050565b612d4581612d32565b8114612d5057600080fd5b50565b600081359050612d6281612d3c565b92915050565b600080600080600060a08688031215612d8457612d83612b44565b5b6000612d9288828901612d1d565b9550506020612da388828901612d1d565b9450506040612db488828901612d53565b9350506060612dc588828901612d53565b9250506080612dd688828901612d53565b9150509295509295909350565b600060208284031215612df957612df8612b44565b5b6000612e0784828501612b73565b91505092915050565b612e1981612d32565b82525050565b6000602082019050612e346000830184612e10565b92915050565b600080600060408486031215612e5357612e52612b44565b5b6000612e6186828701612b73565b935050602084013567ffffffffffffffff811115612e8257612e81612b49565b5b612e8e86828701612b97565b92509250509250925092565b60008115159050919050565b612eaf81612e9a565b82525050565b6000602082019050612eca6000830184612ea6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f1e82612ed5565b810181811067ffffffffffffffff82111715612f3d57612f3c612ee6565b5b80604052505050565b6000612f50612b3a565b9050612f5c8282612f15565b919050565b600067ffffffffffffffff821115612f7c57612f7b612ee6565b5b612f8582612ed5565b9050602081019050919050565b82818337600083830152505050565b6000612fb4612faf84612f61565b612f46565b905082815260208101848484011115612fd057612fcf612ed0565b5b612fdb848285612f92565b509392505050565b600082601f830112612ff857612ff7612b88565b5b8135613008848260208601612fa1565b91505092915050565b60008060006060848603121561302a57613029612b44565b5b600061303886828701612b73565b935050602084013567ffffffffffffffff81111561305957613058612b49565b5b61306586828701612fe3565b925050604061307686828701612c18565b9150509250925092565b6000819050919050565b61309381613080565b82525050565b60006020820190506130ae600083018461308a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156130ee5780820151818401526020810190506130d3565b60008484015250505050565b6000613105826130b4565b61310f81856130bf565b935061311f8185602086016130d0565b61312881612ed5565b840191505092915050565b6000602082019050818103600083015261314d81846130fa565b905092915050565b6000806040838503121561316c5761316b612b44565b5b600061317a85828601612d53565b925050602061318b85828601612d53565b9150509250929050565b600080604083850312156131ac576131ab612b44565b5b60006131ba85828601612b73565b92505060206131cb85828601612b73565b9150509250929050565b6131de81612cf4565b82525050565b60006020820190506131f960008301846131d5565b92915050565b60006020828403121561321557613214612b44565b5b600061322384828501612d53565b91505092915050565b600061012082019050613242600083018c6131d5565b61324f602083018b6131d5565b61325c604083018a612e10565b6132696060830189612e10565b6132766080830188612e10565b61328360a08301876131d5565b61329060c0830186612e10565b61329d60e0830185612e10565b6132ab610100830184612ea6565b9a9950505050505050505050565b6000819050919050565b60006132de6132d96132d484612cd4565b6132b9565b612cd4565b9050919050565b60006132f0826132c3565b9050919050565b6000613302826132e5565b9050919050565b613312816132f7565b82525050565b600060208201905061332d6000830184613309565b92915050565b60006020828403121561334957613348612b44565b5b600061335784828501612d1d565b91505092915050565b60008060008060006080868803121561337c5761337b612b44565b5b600061338a88828901612b73565b955050602061339b88828901612b73565b94505060406133ac88828901612d53565b935050606086013567ffffffffffffffff8111156133cd576133cc612b49565b5b6133d988828901612b97565b92509250509295509295909350565b60008060006060848603121561340157613400612b44565b5b600061340f86828701612b73565b935050602061342086828701612b73565b925050604061343186828701612d53565b9150509250925092565b60008060006060848603121561345457613453612b44565b5b600061346286828701612b73565b935050602061347386828701612d1d565b925050604061348486828701612d53565b9150509250925092565b600080600080608085870312156134a8576134a7612b44565b5b60006134b687828801612b73565b94505060206134c787828801612b73565b93505060406134d887828801612d1d565b92505060606134e987828801612d53565b91505092959194509250565b600082825260208201905092915050565b7f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000600082015250565b600061353c601e836134f5565b915061354782613506565b602082019050919050565b6000602082019050818103600083015261356b8161352f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135b957607f821691505b6020821081036135cc576135cb613572565b5b50919050565b600081905092915050565b60006135e983856135d2565b93506135f6838584612f92565b82840190509392505050565b600061360f8284866135dd565b91508190509392505050565b7f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006136776026836134f5565b91506136828261361b565b604082019050919050565b600060208201905081810360008301526136a68161366a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e782612d32565b91506136f283612d32565b925082820190508082111561370a576137096136ad565b5b92915050565b600061371b82612d32565b915061372683612d32565b925082820390508181111561373e5761373d6136ad565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061377e82612d32565b915061378983612d32565b92508261379957613798613744565b5b828206905092915050565b60006137af82612d32565b91506137ba83612d32565b9250826137ca576137c9613744565b5b828204905092915050565b60006060820190506137ea60008301866131d5565b6137f760208301856131d5565b6138046040830184612e10565b949350505050565b61381581612e9a565b811461382057600080fd5b50565b6000815190506138328161380c565b92915050565b60006020828403121561384e5761384d612b44565b5b600061385c84828501613823565b91505092915050565b61386e81612b4e565b82525050565b60006020820190506138896000830184613865565b92915050565b600061389b83856130bf565b93506138a8838584612f92565b6138b183612ed5565b840190509392505050565b60006040820190506138d16000830186613865565b81810360208301526138e481848661388f565b9050949350505050565b7f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201527f204c7a4170700000000000000000000000000000000000000000000000000000602082015250565b600061394a6026836134f5565b9150613955826138ee565b604082019050919050565b600060208201905081810360008301526139798161393d565b9050919050565b600060408201905061399560008301856131d5565b6139a26020830184612e10565b9392505050565b60006060820190506139be6000830186612e10565b6139cb60208301856131d5565b6139d86040830184612e10565b949350505050565b7f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000600082015250565b6000613a16601d836134f5565b9150613a21826139e0565b602082019050919050565b60006020820190508181036000830152613a4581613a09565b9050919050565b60008160601b9050919050565b6000613a6482613a4c565b9050919050565b6000613a7682613a59565b9050919050565b613a8e613a8982612cf4565b613a6b565b82525050565b6000613aa18285876135dd565b9150613aad8284613a7d565b601482019150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613b207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ae3565b613b2a8683613ae3565b95508019841693508086168417925050509392505050565b6000613b5d613b58613b5384612d32565b6132b9565b612d32565b9050919050565b6000819050919050565b613b7783613b42565b613b8b613b8382613b64565b848454613af0565b825550505050565b600090565b613ba0613b93565b613bab818484613b6e565b505050565b5b81811015613bcf57613bc4600082613b98565b600181019050613bb1565b5050565b601f821115613c1457613be581613abe565b613bee84613ad3565b81016020851015613bfd578190505b613c11613c0985613ad3565b830182613bb0565b50505b505050565b600082821c905092915050565b6000613c3760001984600802613c19565b1980831691505092915050565b6000613c508383613c26565b9150826002028217905092915050565b613c69826130b4565b67ffffffffffffffff811115613c8257613c81612ee6565b5b613c8c82546135a1565b613c97828285613bd3565b600060209050601f831160018114613cca5760008415613cb8578287015190505b613cc28582613c44565b865550613d2a565b601f198416613cd886613abe565b60005b82811015613d0057848901518255600182019150602085019450602081019050613cdb565b86831015613d1d5784890151613d19601f891682613c26565b8355505b6001600288020188555050505b505050505050565b6000608082019050613d476000830188613865565b613d546020830187613865565b613d616040830186612e10565b8181036060830152613d7481848661388f565b90509695505050505050565b7f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201527f6167650000000000000000000000000000000000000000000000000000000000602082015250565b6000613ddc6023836134f5565b9150613de782613d80565b604082019050919050565b60006020820190508181036000830152613e0b81613dcf565b9050919050565b7f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e6e6021836134f5565b9150613e7982613e12565b604082019050919050565b60006020820190508181036000830152613e9d81613e61565b9050919050565b613ead81612bed565b82525050565b6000608082019050613ec86000830188613865565b8181036020830152613edb81868861388f565b9050613eea6040830185613ea4565b613ef7606083018461308a565b9695505050505050565b7f4c7a4170703a20696e76616c6964206d696e4761730000000000000000000000600082015250565b6000613f376015836134f5565b9150613f4282613f01565b602082019050919050565b60006020820190508181036000830152613f6681613f2a565b9050919050565b6000606082019050613f826000830186613865565b613f8f6020830185613865565b613f9c6040830184612e10565b949350505050565b60008160f01b9050919050565b6000613fbc82613fa4565b9050919050565b613fd4613fcf82612b4e565b613fb1565b82525050565b6000819050919050565b613ff5613ff082612d32565b613fda565b82525050565b60006140078285613fc3565b6002820191506140178284613fe4565b6020820191508190509392505050565b600082905092915050565b61403c8383614027565b67ffffffffffffffff81111561405557614054612ee6565b5b61405f82546135a1565b61406a828285613bd3565b6000601f8311600181146140995760008415614087578287013590505b6140918582613c44565b8655506140f9565b601f1984166140a786613abe565b60005b828110156140cf578489013582556001820191506020850194506020810190506140aa565b868310156140ec57848901356140e8601f891682613c26565b8355505b6001600288020188555050505b50505050505050565b600061410d82612d32565b915061411883612d32565b925082820261412681612d32565b9150828204841483151761413d5761413c6136ad565b5b5092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006141a06026836134f5565b91506141ab82614144565b604082019050919050565b600060208201905081810360008301526141cf81614193565b9050919050565b60006080820190506141eb6000830187613865565b6141f86020830186613865565b61420560408301856131d5565b6142126060830184612e10565b95945050505050565b600061422e61422984612f61565b612f46565b90508281526020810184848401111561424a57614249612ed0565b5b6142558482856130d0565b509392505050565b600082601f83011261427257614271612b88565b5b815161428284826020860161421b565b91505092915050565b6000602082840312156142a1576142a0612b44565b5b600082015167ffffffffffffffff8111156142bf576142be612b49565b5b6142cb8482850161425d565b91505092915050565b60006080820190506142e96000830187613865565b81810360208301526142fb81866130fa565b905061430a6040830185613ea4565b818103606083015261431c81846130fa565b905095945050505050565b6000614332826130b4565b61433c81856135d2565b935061434c8185602086016130d0565b80840191505092915050565b60006143648284614327565b915081905092915050565b600060a0820190506143846000830188613865565b818103602083015261439681876130fa565b90506143a56040830186613ea4565b81810360608301526143b781856130fa565b905081810360808301526143cb81846130fa565b90509695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061440d6020836134f5565b9150614418826143d7565b602082019050919050565b6000602082019050818103600083015261443c81614400565b9050919050565b60008151905061445281612d3c565b92915050565b60006020828403121561446e5761446d612b44565b5b600061447c84828501614443565b91505092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b60006144bb600e836134f5565b91506144c682614485565b602082019050919050565b600060208201905081810360008301526144ea816144ae565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b60006145276011836134f5565b9150614532826144f1565b602082019050919050565b600060208201905081810360008301526145568161451a565b9050919050565b7f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060008201527f61207472757374656420736f7572636500000000000000000000000000000000602082015250565b60006145b96030836134f5565b91506145c48261455d565b604082019050919050565b600060208201905081810360008301526145e8816145ac565b9050919050565b60006145fa82612cd4565b9050919050565b61460a816145ef565b82525050565b600060c0820190506146256000830189613865565b818103602083015261463781886130fa565b9050818103604083015261464b81876130fa565b905061465a6060830186614601565b61466760808301856131d5565b81810360a083015261467981846130fa565b905097965050505050505056fea2646970667358221220f94acbb945950c3c0df4a2ac842fa56307ef60551dc900cff7397b22e0230f7a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Vester.sol:Vester",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1217,
        "contract": "contracts/Vester.sol:Vester",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1223,
        "contract": "contracts/Vester.sol:Vester",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 1225,
        "contract": "contracts/Vester.sol:Vester",
        "label": "precrime",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1710,
        "contract": "contracts/Vester.sol:Vester",
        "label": "failedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 243,
        "contract": "contracts/Vester.sol:Vester",
        "label": "nextStreamId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 269,
        "contract": "contracts/Vester.sol:Vester",
        "label": "streams",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Stream)264_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Stream)264_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vester.Stream)",
        "numberOfBytes": "32",
        "value": "t_struct(Stream)264_storage"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Stream)264_storage": {
        "encoding": "inplace",
        "label": "struct Vester.Stream",
        "members": [
          {
            "astId": 245,
            "contract": "contracts/Vester.sol:Vester",
            "label": "streamId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 247,
            "contract": "contracts/Vester.sol:Vester",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 249,
            "contract": "contracts/Vester.sol:Vester",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 251,
            "contract": "contracts/Vester.sol:Vester",
            "label": "depositAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/Vester.sol:Vester",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 255,
            "contract": "contracts/Vester.sol:Vester",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 257,
            "contract": "contracts/Vester.sol:Vester",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 259,
            "contract": "contracts/Vester.sol:Vester",
            "label": "ratesPerSecond",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 261,
            "contract": "contracts/Vester.sol:Vester",
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 263,
            "contract": "contracts/Vester.sol:Vester",
            "label": "active",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}