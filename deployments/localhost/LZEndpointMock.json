{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        }
      ],
      "name": "PayloadCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "PayloadStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        }
      ],
      "name": "UaForceResumeReceive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ValueTransferFailed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blockNextMsg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdapterParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInZRO",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainID",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "getInboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "getLengthOfQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainID",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        }
      ],
      "name": "getOutboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getReceiveLibraryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getReceiveVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSendLibraryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSendVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "hasStoredPayload",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "inboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReceivingPayload",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSendingPayload",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lzEndpointLookup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "msgsToDeliver",
      "outputs": [
        {
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextMsgBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "outboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeBP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "receivePayload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerFeeConfig",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryPayload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "setDefaultAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lzEndpointAddr",
          "type": "address"
        }
      ],
      "name": "setDestLzEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleFee",
          "type": "uint256"
        }
      ],
      "name": "setOracleFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_zroFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeBP",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_dstGasPriceInWei",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "setRelayerPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "storedPayload",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "payloadLength",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fbb67c9a7fdac65cffcd999656f298f1d62c488120920e85863d67b18f0a456",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4451142",
    "logsBloom": "0x
    "blockHash": "0x0534d22b8ad71e8cd9d49d82abc7ea2bd3a2288ed82da9048001b6c1be71f40c",
    "transactionHash": "0x5fbb67c9a7fdac65cffcd999656f298f1d62c488120920e85863d67b18f0a456",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4451142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "146e6c10188d2bbb7df0847dfe3c8781",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"}],\"name\":\"PayloadCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"PayloadStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"}],\"name\":\"UaForceResumeReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ValueTransferFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockNextMsg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdapterParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainID\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"getInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"getLengthOfQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"}],\"name\":\"getOutboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getReceiveLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getReceiveVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSendLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSendVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"hasStoredPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"inboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceivingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lzEndpointLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"msgsToDeliver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMsgBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"outboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"receivePayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerFeeConfig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"setDefaultAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lzEndpointAddr\",\"type\":\"address\"}],\"name\":\"setDestLzEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleFee\",\"type\":\"uint256\"}],\"name\":\"setOracleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_zroFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeBP\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_dstGasPriceInWei\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gasPerByte\",\"type\":\"uint64\"}],\"name\":\"setRelayerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"storedPayload\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"payloadLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/LZEndpointMock.sol\":\"LZEndpointMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0xb0f5dd5442f7f6dc3cba510c3170e5304de918b082ac658a2935433e80fefb66\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe377e661a587f855100ae6bbc9159e9aa279a99b632b445b3b9fb45a347da63a\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x42d10415d035529fcdff738d6542844ad58124b4e1da5a8ff92d6ddd8bf96513\",\"license\":\"MIT\"},\"contracts/libraries/LzLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary LzLib {\\r\\n    // LayerZero communication\\r\\n    struct CallParams {\\r\\n        address payable refundAddress;\\r\\n        address zroPaymentAddress;\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // Address type handling\\r\\n\\r\\n    struct AirdropParams {\\r\\n        uint airdropAmount;\\r\\n        bytes32 airdropAddress;\\r\\n    }\\r\\n\\r\\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\\r\\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\\r\\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\\r\\n        } else {\\r\\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Build Adapter Params\\r\\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\\r\\n        // txType 1\\r\\n        // bytes  [2       32      ]\\r\\n        // fields [txType  extraGas]\\r\\n        return abi.encodePacked(uint16(1), _uaGas);\\r\\n    }\\r\\n\\r\\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\\r\\n        require(_params.airdropAmount > 0, \\\"Airdrop amount must be greater than 0\\\");\\r\\n        require(_params.airdropAddress != bytes32(0x0), \\\"Airdrop address must be set\\\");\\r\\n\\r\\n        // txType 2\\r\\n        // bytes  [2       32        32            bytes[]         ]\\r\\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\r\\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\\r\\n    }\\r\\n\\r\\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\\r\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Decode Adapter Params\\r\\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\\r\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            txType := mload(add(_adapterParams, 2))\\r\\n            uaGas := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n        require(txType == 1 || txType == 2, \\\"Unsupported txType\\\");\\r\\n        require(uaGas > 0, \\\"Gas too low\\\");\\r\\n\\r\\n        if (txType == 2) {\\r\\n            assembly {\\r\\n                airdropAmount := mload(add(_adapterParams, 66))\\r\\n                airdropAddress := mload(add(_adapterParams, 86))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // Address type handling\\r\\n    // TODO: testing\\r\\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\\r\\n        require(bytes12(_bytes32Address) == bytes12(0), \\\"Invalid address\\\"); // first 12 bytes should be empty\\r\\n        return address(uint160(uint(_bytes32Address)));\\r\\n    }\\r\\n\\r\\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\\r\\n        return bytes32(uint(uint160(_address)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2fe20a19e0cc5c7b818dcc406587f95d297e3fe852aaa5135de577a4bcdf5d34\",\"license\":\"BUSL-1.1\"},\"contracts/mocks/LZEndpointMock.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"../libraries/LzLib.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/*\\r\\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\\r\\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\\r\\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\\r\\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\\r\\nunlike a real LayerZero endpoint, it is\\r\\n- no messaging library versioning\\r\\n- send() will short circuit to lzReceive()\\r\\n- no user application configuration\\r\\n*/\\r\\ncontract LZEndpointMock is ILayerZeroEndpoint {\\r\\n    uint8 internal constant _NOT_ENTERED = 1;\\r\\n    uint8 internal constant _ENTERED = 2;\\r\\n\\r\\n    mapping(address => address) public lzEndpointLookup;\\r\\n\\r\\n    uint16 public mockChainId;\\r\\n    bool public nextMsgBlocked;\\r\\n\\r\\n    // fee config\\r\\n    RelayerFeeConfig public relayerFeeConfig;\\r\\n    ProtocolFeeConfig public protocolFeeConfig;\\r\\n    uint public oracleFee;\\r\\n    bytes public defaultAdapterParams;\\r\\n\\r\\n    // path = remote addrss + local address\\r\\n    // inboundNonce = [srcChainId][path].\\r\\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\\r\\n    //todo: this is a hack\\r\\n    // outboundNonce = [dstChainId][srcAddress]\\r\\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\\r\\n    //    // outboundNonce = [dstChainId][path].\\r\\n    //    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\\r\\n    // storedPayload = [srcChainId][path]\\r\\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\\r\\n    // msgToDeliver = [srcChainId][path]\\r\\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\\r\\n\\r\\n    // reentrancy guard\\r\\n    uint8 internal _send_entered_state = 1;\\r\\n    uint8 internal _receive_entered_state = 1;\\r\\n\\r\\n    struct ProtocolFeeConfig {\\r\\n        uint zroFee;\\r\\n        uint nativeBP;\\r\\n    }\\r\\n\\r\\n    struct RelayerFeeConfig {\\r\\n        uint128 dstPriceRatio; // 10^10\\r\\n        uint128 dstGasPriceInWei;\\r\\n        uint128 dstNativeAmtCap;\\r\\n        uint64 baseGas;\\r\\n        uint64 gasPerByte;\\r\\n    }\\r\\n\\r\\n    struct StoredPayload {\\r\\n        uint64 payloadLength;\\r\\n        address dstAddress;\\r\\n        bytes32 payloadHash;\\r\\n    }\\r\\n\\r\\n    struct QueuedPayload {\\r\\n        address dstAddress;\\r\\n        uint64 nonce;\\r\\n        bytes payload;\\r\\n    }\\r\\n\\r\\n    modifier sendNonReentrant() {\\r\\n        require(_send_entered_state == _NOT_ENTERED, \\\"LayerZeroMock: no send reentrancy\\\");\\r\\n        _send_entered_state = _ENTERED;\\r\\n        _;\\r\\n        _send_entered_state = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier receiveNonReentrant() {\\r\\n        require(_receive_entered_state == _NOT_ENTERED, \\\"LayerZeroMock: no receive reentrancy\\\");\\r\\n        _receive_entered_state = _ENTERED;\\r\\n        _;\\r\\n        _receive_entered_state = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\\r\\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\\r\\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\\r\\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\\r\\n\\r\\n    constructor(uint16 _chainId) {\\r\\n        mockChainId = _chainId;\\r\\n\\r\\n        // init config\\r\\n        relayerFeeConfig = RelayerFeeConfig({\\r\\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\\r\\n            dstGasPriceInWei: 1e10,\\r\\n            dstNativeAmtCap: 1e19,\\r\\n            baseGas: 100,\\r\\n            gasPerByte: 1\\r\\n        });\\r\\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\\r\\n        oracleFee = 1e16;\\r\\n        defaultAdapterParams = LzLib.buildDefaultAdapterParams(200000);\\r\\n    }\\r\\n\\r\\n    // ------------------------------ ILayerZeroEndpoint Functions ------------------------------\\r\\n    function send(uint16 _chainId, bytes memory _path, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) external payable override sendNonReentrant {\\r\\n        require(_path.length == 40, \\\"LayerZeroMock: incorrect remote address size\\\"); // only support evm chains\\r\\n\\r\\n        address dstAddr;\\r\\n        assembly {\\r\\n            dstAddr := mload(add(_path, 20))\\r\\n        }\\r\\n\\r\\n        address lzEndpoint = lzEndpointLookup[dstAddr];\\r\\n        require(lzEndpoint != address(0), \\\"LayerZeroMock: destination LayerZero Endpoint not found\\\");\\r\\n\\r\\n        // not handle zro token\\r\\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\\r\\n        (uint nativeFee, ) = estimateFees(_chainId, msg.sender, _payload, _zroPaymentAddress != address(0x0), adapterParams);\\r\\n        require(msg.value >= nativeFee, \\\"LayerZeroMock: not enough native for fees\\\");\\r\\n\\r\\n        uint64 nonce = ++outboundNonce[_chainId][msg.sender];\\r\\n\\r\\n        // refund if they send too much\\r\\n        uint amount = msg.value - nativeFee;\\r\\n        if (amount > 0) {\\r\\n            _refundAddress.call{value: amount}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        // Mock the process of receiving msg on dst chain\\r\\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\\r\\n        (, uint extraGas, uint dstNativeAmt, address payable dstNativeAddr) = LzLib.decodeAdapterParams(adapterParams);\\r\\n        if (dstNativeAmt > 0) {\\r\\n            (bool success, ) = dstNativeAddr.call{value: dstNativeAmt}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                emit ValueTransferFailed(dstNativeAddr, dstNativeAmt);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory srcUaAddress = abi.encodePacked(msg.sender, dstAddr); // cast this address to bytes\\r\\n        bytes memory payload = _payload;\\r\\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, srcUaAddress, dstAddr, nonce, extraGas, payload);\\r\\n    }\\r\\n\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _path, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external override receiveNonReentrant {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\\r\\n\\r\\n        // assert and increment the nonce. no message shuffling\\r\\n        require(_nonce == ++inboundNonce[_srcChainId][_path], \\\"LayerZeroMock: wrong nonce\\\");\\r\\n\\r\\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\\r\\n        if (sp.payloadHash != bytes32(0)) {\\r\\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\\r\\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\\r\\n\\r\\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\\r\\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\\r\\n            if (msgs.length > 0) {\\r\\n                // extend the array\\r\\n                msgs.push(newMsg);\\r\\n\\r\\n                // shift all the indexes up for pop()\\r\\n                for (uint i = 0; i < msgs.length - 1; i++) {\\r\\n                    msgs[i + 1] = msgs[i];\\r\\n                }\\r\\n\\r\\n                // put the newMsg at the bottom of the stack\\r\\n                msgs[0] = newMsg;\\r\\n            } else {\\r\\n                msgs.push(newMsg);\\r\\n            }\\r\\n        } else if (nextMsgBlocked) {\\r\\n            storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\\r\\n            emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, bytes(\\\"\\\"));\\r\\n            // ensure the next msgs that go through are no longer blocked\\r\\n            nextMsgBlocked = false;\\r\\n        } else {\\r\\n            try ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _path, _nonce, _payload) {} catch (bytes memory reason) {\\r\\n                storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\\r\\n                emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, reason);\\r\\n                // ensure the next msgs that go through are no longer blocked\\r\\n                nextMsgBlocked = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getInboundNonce(uint16 _chainID, bytes calldata _path) external view override returns (uint64) {\\r\\n        return inboundNonce[_chainID][_path];\\r\\n    }\\r\\n\\r\\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\\r\\n        return outboundNonce[_chainID][_srcAddress];\\r\\n    }\\r\\n\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes memory _payload, bool _payInZRO, bytes memory _adapterParams) public view returns (uint nativeFee, uint zroFee) {\\r\\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\\r\\n\\r\\n        // Relayer Fee\\r\\n        uint relayerFee = _getRelayerFee(_dstChainId, 1, _userApplication, _payload.length, adapterParams);\\r\\n\\r\\n        // LayerZero Fee\\r\\n        uint protocolFee = _getProtocolFees(_payInZRO, relayerFee, oracleFee);\\r\\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\\r\\n\\r\\n        // return the sum of fees\\r\\n        nativeFee = nativeFee + relayerFee + oracleFee;\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return mockChainId;\\r\\n    }\\r\\n\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _path, bytes calldata _payload) external override {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\\r\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZeroMock: no stored payload\\\");\\r\\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \\\"LayerZeroMock: invalid payload\\\");\\r\\n\\r\\n        address dstAddress = sp.dstAddress;\\r\\n        // empty the storedPayload\\r\\n        sp.payloadLength = 0;\\r\\n        sp.dstAddress = address(0);\\r\\n        sp.payloadHash = bytes32(0);\\r\\n\\r\\n        uint64 nonce = inboundNonce[_srcChainId][_path];\\r\\n\\r\\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _path, nonce, _payload);\\r\\n        emit PayloadCleared(_srcChainId, _path, nonce, dstAddress);\\r\\n    }\\r\\n\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _path) external view override returns (bool) {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\\r\\n        return sp.payloadHash != bytes32(0);\\r\\n    }\\r\\n\\r\\n    function getSendLibraryAddress(address) external view override returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function getReceiveLibraryAddress(address) external view override returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function isSendingPayload() external view override returns (bool) {\\r\\n        return _send_entered_state == _ENTERED;\\r\\n    }\\r\\n\\r\\n    function isReceivingPayload() external view override returns (bool) {\\r\\n        return _receive_entered_state == _ENTERED;\\r\\n    }\\r\\n\\r\\n    function getConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16, /*_chainId*/\\r\\n        address, /*_ua*/\\r\\n        uint /*_configType*/\\r\\n    ) external pure override returns (bytes memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function getSendVersion(\\r\\n        address /*_userApplication*/\\r\\n    ) external pure override returns (uint16) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function getReceiveVersion(\\r\\n        address /*_userApplication*/\\r\\n    ) external pure override returns (uint16) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function setConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16, /*_chainId*/\\r\\n        uint, /*_configType*/\\r\\n        bytes memory /*_config*/\\r\\n    ) external override {}\\r\\n\\r\\n    function setSendVersion(\\r\\n        uint16 /*version*/\\r\\n    ) external override {}\\r\\n\\r\\n    function setReceiveVersion(\\r\\n        uint16 /*version*/\\r\\n    ) external override {}\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _path) external override {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\\r\\n        // revert if no messages are cached. safeguard malicious UA behaviour\\r\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZeroMock: no stored payload\\\");\\r\\n        require(sp.dstAddress == msg.sender, \\\"LayerZeroMock: invalid caller\\\");\\r\\n\\r\\n        // empty the storedPayload\\r\\n        sp.payloadLength = 0;\\r\\n        sp.dstAddress = address(0);\\r\\n        sp.payloadHash = bytes32(0);\\r\\n\\r\\n        emit UaForceResumeReceive(_srcChainId, _path);\\r\\n\\r\\n        // resume the receiving of msgs after we force clear the \\\"stuck\\\" msg\\r\\n        _clearMsgQue(_srcChainId, _path);\\r\\n    }\\r\\n\\r\\n    // ------------------------------ Other Public/External Functions --------------------------------------------------\\r\\n\\r\\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\\r\\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\\r\\n    }\\r\\n\\r\\n    // used to simulate messages received get stored as a payload\\r\\n    function blockNextMsg() external {\\r\\n        nextMsgBlocked = true;\\r\\n    }\\r\\n\\r\\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\\r\\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\\r\\n    }\\r\\n\\r\\n    function setRelayerPrice(uint128 _dstPriceRatio, uint128 _dstGasPriceInWei, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external {\\r\\n        relayerFeeConfig.dstPriceRatio = _dstPriceRatio;\\r\\n        relayerFeeConfig.dstGasPriceInWei = _dstGasPriceInWei;\\r\\n        relayerFeeConfig.dstNativeAmtCap = _dstNativeAmtCap;\\r\\n        relayerFeeConfig.baseGas = _baseGas;\\r\\n        relayerFeeConfig.gasPerByte = _gasPerByte;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint _zroFee, uint _nativeBP) external {\\r\\n        protocolFeeConfig.zroFee = _zroFee;\\r\\n        protocolFeeConfig.nativeBP = _nativeBP;\\r\\n    }\\r\\n\\r\\n    function setOracleFee(uint _oracleFee) external {\\r\\n        oracleFee = _oracleFee;\\r\\n    }\\r\\n\\r\\n    function setDefaultAdapterParams(bytes memory _adapterParams) external {\\r\\n        defaultAdapterParams = _adapterParams;\\r\\n    }\\r\\n\\r\\n    // --------------------- Internal Functions ---------------------\\r\\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\\r\\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _path) internal {\\r\\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\\r\\n\\r\\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\\r\\n        while (msgs.length > 0) {\\r\\n            QueuedPayload memory payload = msgs[msgs.length - 1];\\r\\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _path, payload.nonce, payload.payload);\\r\\n            msgs.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getProtocolFees(bool _payInZro, uint _relayerFee, uint _oracleFee) internal view returns (uint) {\\r\\n        if (_payInZro) {\\r\\n            return protocolFeeConfig.zroFee;\\r\\n        } else {\\r\\n            return ((_relayerFee + _oracleFee) * protocolFeeConfig.nativeBP) / 10000;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getRelayerFee(\\r\\n        uint16, /* _dstChainId */\\r\\n        uint16, /* _outboundProofType */\\r\\n        address, /* _userApplication */\\r\\n        uint _payloadSize,\\r\\n        bytes memory _adapterParams\\r\\n    ) internal view returns (uint) {\\r\\n        (uint16 txType, uint extraGas, uint dstNativeAmt, ) = LzLib.decodeAdapterParams(_adapterParams);\\r\\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\\r\\n        if (txType == 2) {\\r\\n            require(relayerFeeConfig.dstNativeAmtCap >= dstNativeAmt, \\\"LayerZeroMock: dstNativeAmt too large \\\");\\r\\n            totalRemoteToken += dstNativeAmt;\\r\\n        }\\r\\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\\r\\n        uint remoteGasTotal = relayerFeeConfig.dstGasPriceInWei * (relayerFeeConfig.baseGas + extraGas);\\r\\n        totalRemoteToken += remoteGasTotal;\\r\\n\\r\\n        // tokenConversionRate = dstPrice / localPrice\\r\\n        // basePrice = totalRemoteToken * tokenConversionRate\\r\\n        uint basePrice = (totalRemoteToken * relayerFeeConfig.dstPriceRatio) / 10**10;\\r\\n\\r\\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\\r\\n        uint pricePerByte = (relayerFeeConfig.dstGasPriceInWei * relayerFeeConfig.gasPerByte * relayerFeeConfig.dstPriceRatio) / 10**10;\\r\\n\\r\\n        return basePrice + _payloadSize * pricePerByte;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf5859a067da8a6ea9e5a43086283199976ac6b5e1694961a3f43c00de64703d3\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600c60006101000a81548160ff021916908360ff1602179055506001600c60016101000a81548160ff021916908360ff1602179055503480156200004957600080fd5b50604051620052833803806200528383398181016040528101906200006f91906200031a565b80600160006101000a81548161ffff021916908361ffff1602179055506040518060a001604052806402540be4006fffffffffffffffffffffffffffffffff1681526020016402540be4006fffffffffffffffffffffffffffffffff168152602001678ac7230489e800006fffffffffffffffffffffffffffffffff168152602001606467ffffffffffffffff168152602001600167ffffffffffffffff16815250600260008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050506040518060400160405280670de0b6b3a764000081526020016103e881525060046000820151816000015560208201518160010155905050662386f26fc100006006819055506200029062030d40620002a860201b620026671760201c565b60079081620002a09190620005c6565b50506200073e565b6060600182604051602001620002c09291906200070e565b6040516020818303038152906040529050919050565b600080fd5b600061ffff82169050919050565b620002f481620002db565b81146200030057600080fd5b50565b6000815190506200031481620002e9565b92915050565b600060208284031215620003335762000332620002d6565b5b6000620003438482850162000303565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ce57607f821691505b602082108103620003e457620003e362000386565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200044e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200040f565b6200045a86836200040f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004a7620004a16200049b8462000472565b6200047c565b62000472565b9050919050565b6000819050919050565b620004c38362000486565b620004db620004d282620004ae565b8484546200041c565b825550505050565b600090565b620004f2620004e3565b620004ff818484620004b8565b505050565b5b8181101562000527576200051b600082620004e8565b60018101905062000505565b5050565b601f82111562000576576200054081620003ea565b6200054b84620003ff565b810160208510156200055b578190505b620005736200056a85620003ff565b83018262000504565b50505b505050565b600082821c905092915050565b60006200059b600019846008026200057b565b1980831691505092915050565b6000620005b6838362000588565b9150826002028217905092915050565b620005d1826200034c565b67ffffffffffffffff811115620005ed57620005ec62000357565b5b620005f98254620003b5565b620006068282856200052b565b600060209050601f8311600181146200063e576000841562000629578287015190505b620006358582620005a8565b865550620006a5565b601f1984166200064e86620003ea565b60005b82811015620006785784890151825560018201915060208501945060208101905062000651565b8683101562000698578489015162000694601f89168262000588565b8355505b6001600288020188555050505b505050505050565b60008160f01b9050919050565b6000620006c782620006ad565b9050919050565b620006e3620006dd82620002db565b620006ba565b82525050565b6000819050919050565b62000708620007028262000472565b620006e9565b82525050565b60006200071c8285620006ce565b6002820191506200072e8284620006f3565b6020820191508190509392505050565b614b35806200074e6000396000f3fe60806040526004361061021a5760003560e01c80639924d33b11610123578063ca066b35116100ab578063e97a448a1161006f578063e97a448a1461083c578063f5ecbdbc14610867578063f9cd3ceb146108a4578063fbba623b146108cf578063fdc07c70146108f85761021a565b8063ca066b3514610769578063cbed8b9c14610794578063d23104f1146107bd578063da1a7c9a146107d4578063db14f305146108115761021a565b8063b6d9ef60116100f2578063b6d9ef6014610695578063c08f15a1146106be578063c2fa4813146106e7578063c580310014610710578063c81b383a1461072c5761021a565b80639924d33b146105b55780639c729da1146105f2578063aaff5f161461062f578063b2086499146106585761021a565b80633408e470116101a657806371ba2fd61161017557806371ba2fd61461049057806376a386dc146104cd5780637a1457481461050c5780637f6df8e614610549578063907c5e7e146105865761021a565b80633408e470146103d35780633e0dd83e146103fe57806340a7bb101461042957806342d65a8d146104675761021a565b806310ddb137116101ed57806310ddb137146102ee57806312a9ee6b14610317578063240de27714610356578063272bd3841461037f5780632c365e25146103aa5761021a565b806307d3277f1461021f57806307e0db171461024b578063096568f6146102745780630eaf6ea6146102b1575b600080fd5b34801561022b57600080fd5b50610234610935565b604051610242929190612d61565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d9190612dd8565b610947565b005b34801561028057600080fd5b5061029b60048036038101906102969190612e63565b61094a565b6040516102a89190612e9f565b60405180910390f35b3480156102bd57600080fd5b506102d860048036038101906102d39190612f1f565b610955565b6040516102e59190612f9a565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190612dd8565b6109a8565b005b34801561032357600080fd5b5061033e60048036038101906103399190613122565b6109ab565b60405161034d93929190613242565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190613280565b610ad1565b005b34801561038b57600080fd5b50610394610ae9565b6040516103a191906132c0565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc9190613356565b610b77565b005b3480156103df57600080fd5b506103e8610c8a565b6040516103f59190612e9f565b60405180910390f35b34801561040a57600080fd5b50610413610ca2565b6040516104209190612f9a565b60405180910390f35b34801561043557600080fd5b50610450600480360381019061044b91906133fd565b610cb5565b60405161045e929190612d61565b60405180910390f35b34801561047357600080fd5b5061048e60048036038101906104899190612f1f565b610db6565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612e63565b610f96565b6040516104c491906134b0565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef91906134cb565b610fa0565b60405161050393929190613540565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e9190613577565b611021565b60405161054091906135b7565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190612f1f565b611098565b60405161057d91906135d2565b60405180910390f35b34801561059257600080fd5b5061059b6110e0565b6040516105ac9594939291906135fc565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d791906134cb565b611180565b6040516105e991906135b7565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612e63565b6111cc565b60405161062691906134b0565b60405180910390f35b34801561063b57600080fd5b506106566004803603810190610651919061364f565b6111d6565b005b34801561066457600080fd5b5061067f600480360381019061067a9190613577565b61149d565b60405161068c91906135b7565b60405180910390f35b3480156106a157600080fd5b506106bc60048036038101906106b791906136e4565b6114d3565b005b3480156106ca57600080fd5b506106e560048036038101906106e09190613711565b6114dd565b005b3480156106f357600080fd5b5061070e60048036038101906107099190613751565b61155e565b005b61072a6004803603810190610725919061385e565b611f0d565b005b34801561073857600080fd5b50610753600480360381019061074e9190612e63565b612525565b60405161076091906134b0565b60405180910390f35b34801561077557600080fd5b5061077e612558565b60405161078b9190612f9a565b60405180910390f35b3480156107a057600080fd5b506107bb60048036038101906107b69190613945565b612578565b005b3480156107c957600080fd5b506107d261257e565b005b3480156107e057600080fd5b506107fb60048036038101906107f69190612e63565b61259a565b6040516108089190612e9f565b60405180910390f35b34801561081d57600080fd5b506108266125a5565b6040516108339190612e9f565b60405180910390f35b34801561084857600080fd5b506108516125b9565b60405161085e9190612f9a565b60405180910390f35b34801561087357600080fd5b5061088e600480360381019061088991906139c8565b6125d9565b60405161089b91906132c0565b60405180910390f35b3480156108b057600080fd5b506108b96125f5565b6040516108c691906135d2565b60405180910390f35b3480156108db57600080fd5b506108f660048036038101906108f19190613a2f565b6125fb565b005b34801561090457600080fd5b5061091f600480360381019061091a9190612f1f565b61260e565b60405161092c91906135b7565b60405180910390f35b60048060000154908060010154905082565b50565b600060019050919050565b600080600a60008661ffff1661ffff1681526020019081526020016000208484604051610983929190613aa8565b908152602001604051809103902090506000801b816001015414159150509392505050565b50565b600b6020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505081815481106109e957600080fd5b906000526020600020906002020160009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900467ffffffffffffffff1690806001018054610a4e90613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7a90613af0565b8015610ac75780601f10610a9c57610100808354040283529160200191610ac7565b820191906000526020600020905b815481529060010190602001808311610aaa57829003601f168201915b5050505050905083565b81600460000181905550806004600101819055505050565b60078054610af690613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290613af0565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505081565b84600260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555083600260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555082600260010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555081600260010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600260010160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050565b6000600160009054906101000a900461ffff16905090565b600160029054906101000a900460ff1681565b600080600080845111610d525760078054610ccf90613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90613af0565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050610d54565b835b90506000610d678960018a8a5186612693565b90506000610d7887836006546128d9565b905086610d885780945084610d8d565b809350835b506006548286610d9d9190613b50565b610da79190613b50565b94505050509550959350505050565b6000600a60008561ffff1661ffff1681526020019081526020016000208383604051610de3929190613aa8565b908152602001604051809103902090506000801b816001015403610e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3390613be1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590613c4d565b60405180910390fd5b60008160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000801b81600101819055507f23d2684f396e92a6e2ff2d16f98e6fea00d50cb27a64b531bc0748f730211f98848484604051610f7d93929190613c9a565b60405180910390a1610f90848484612921565b50505050565b6000309050919050565b600a60205281600052604060002081805160208101820180518482526020830160208501208183528095505050505050600091509150508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905083565b6000600960008461ffff1661ffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff16905092915050565b6000600b60008561ffff1661ffff16815260200190815260200160002083836040516110c5929190613aa8565b90815260200160405180910390208054905090509392505050565b60028060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a900467ffffffffffffffff16908060010160189054906101000a900467ffffffffffffffff16905085565b6008602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900467ffffffffffffffff1681565b6000309050919050565b6000600a60008761ffff1661ffff1681526020019081526020016000208585604051611203929190613aa8565b908152602001604051809103902090506000801b81600101540361125c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125390613be1565b60405180910390fd5b8060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16838390501480156112aa5750806001015483836040516112a0929190613aa8565b6040518091039020145b6112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e090613d18565b60405180910390fd5b60008160000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008260000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000801b82600101819055506000600860008961ffff1661ffff16815260200190815260200160002087876040516113bb929190613aa8565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff16621d3567898989858a8a6040518763ffffffff1660e01b815260040161142296959493929190613d38565b600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050507f612434f39581c8e7d99746c9c20c6eb0ce8c0eb99f007c5719d620841370957d888888848660405161148b959493929190613d8f565b60405180910390a15050505050505050565b60096020528160005260406000206020528060005260406000206000915091509054906101000a900467ffffffffffffffff1681565b8060068190555050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600160ff16600c60019054906101000a900460ff1660ff16146115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad90613e4f565b60405180910390fd5b6002600c60016101000a81548160ff021916908360ff1602179055506000600a60008a61ffff1661ffff16815260200190815260200160002088886040516115ff929190613aa8565b90815260200160405180910390209050600860008a61ffff1661ffff168152602001908152602001600020888860405161163a929190613aa8565b9081526020016040518091039020600081819054906101000a900467ffffffffffffffff1661166890613e6f565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168567ffffffffffffffff16146116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d990613eeb565b60405180910390fd5b6000801b816001015414611b2d576000600b60008b61ffff1661ffff168152602001908152602001600020898960405161171d929190613aa8565b90815260200160405180910390209050600060405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018867ffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600082805490501115611a6c578181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600101908161187391906140b7565b50505060005b6001838054905061188a9190614189565b8110156119b4578281815481106118a4576118a36141bd565b5b9060005260206000209060020201836001836118c09190613b50565b815481106118d1576118d06141bd565b5b90600052602060002090600202016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900467ffffffffffffffff168160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001820181600101908161199d9190614202565b5090505080806119ac906142ea565b915050611879565b5080826000815481106119ca576119c96141bd565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019081611a6391906140b7565b50905050611b26565b8181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019081611b2291906140b7565b5050505b5050611ee6565b600160029054906101000a900460ff1615611cc75760405180606001604052808484905067ffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018484604051611b8c929190613aa8565b6040518091039020815250600a60008b61ffff1661ffff1681526020019081526020016000208989604051611bc2929190613aa8565b908152602001604051809103902060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101559050507f0f9e4d95b62f08222d612b5ab92039cd8fbbbea550a95e8df9f927436bbdf5db8989898989888860405180602001604052806000815250604051611c9f989796959493929190614332565b60405180910390a16000600160026101000a81548160ff021916908315150217905550611ee5565b8573ffffffffffffffffffffffffffffffffffffffff16621d3567858b8b8b8a89896040518863ffffffff1660e01b8152600401611d0a96959493929190613d38565b600060405180830381600088803b158015611d2457600080fd5b5087f193505050508015611d36575060015b611ee3573d8060008114611d66576040519150601f19603f3d011682016040523d82523d6000602084013e611d6b565b606091505b5060405180606001604052808585905067ffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018585604051611db6929190613aa8565b6040518091039020815250600a60008c61ffff1661ffff1681526020019081526020016000208a8a604051611dec929190613aa8565b908152602001604051809103902060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101559050507f0f9e4d95b62f08222d612b5ab92039cd8fbbbea550a95e8df9f927436bbdf5db8a8a8a8a8a898988604051611eba989796959493929190614332565b60405180910390a16000600160026101000a81548160ff02191690831515021790555050611ee4565b5b5b5b506001600c60016101000a81548160ff021916908360ff1602179055505050505050505050565b600160ff16600c60009054906101000a900460ff1660ff1614611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5c9061441e565b60405180910390fd5b6002600c60006101000a81548160ff021916908360ff1602179055506028865114611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc906144b0565b60405180910390fd5b60006014870151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209790614542565b60405180910390fd5b60008084511161213a57600780546120b790613af0565b80601f01602080910402602001604051908101604052809291908181526020018280546120e390613af0565b80156121305780601f1061210557610100808354040283529160200191612130565b820191906000526020600020905b81548152906001019060200180831161211357829003601f168201915b505050505061213c565b835b905060006121c18b338b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141586610cb5565b50905080341015612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fe906145d4565b60405180910390fd5b6000600960008d61ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1661228190613e6f565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050600082346122b69190614189565b9050600081111561232b578873ffffffffffffffffffffffffffffffffffffffff16816040516122e59061461a565b60006040518083038185875af1925050503d8060008114612322576040519150601f19603f3d011682016040523d82523d6000602084013e612327565b606091505b5050505b600080600061233987612bcc565b9350935093505060008211156124015760008173ffffffffffffffffffffffffffffffffffffffff168360405161236f9061461a565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50509050806123ff57828273ffffffffffffffffffffffffffffffffffffffff167f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a360405160405180910390a35b505b6000338a604051602001612416929190614677565b604051602081830303815290604052905060008f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090508973ffffffffffffffffffffffffffffffffffffffff1663c2fa4813600160009054906101000a900461ffff16848e8b8a876040518763ffffffff1660e01b81526004016124c3969594939291906146a3565b600060405180830381600087803b1580156124dd57600080fd5b505af11580156124f1573d6000803e3d6000fd5b5050505050505050505050505050506001600c60006101000a81548160ff021916908360ff16021790555050505050505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260ff16600c60019054906101000a900460ff1660ff1614905090565b50505050565b60018060026101000a81548160ff021916908315150217905550565b600060019050919050565b600160009054906101000a900461ffff1681565b6000600260ff16600c60009054906101000a900460ff1660ff1614905090565b6060604051806020016040528060008152509050949350505050565b60065481565b806007908161260a91906140b7565b5050565b6000600860008561ffff1661ffff168152602001908152602001600020838360405161263b929190613aa8565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1690509392505050565b606060018260405160200161267d929190614769565b6040516020818303038152906040529050919050565b6000806000806126a285612bcc565b50925092509250600060028461ffff160361273c5781600260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16101561272d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272490614807565b60405180910390fd5b81816127399190613b50565b90505b600083600260010160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661276d9190613b50565b600260000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166127ab9190614827565b905080826127b99190613b50565b915060006402540be400600260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16846128029190614827565b61280c9190614898565b905060006402540be400600260000160009054906101000a90046fffffffffffffffffffffffffffffffff16600260010160189054906101000a900467ffffffffffffffff1667ffffffffffffffff16600260000160109054906101000a90046fffffffffffffffffffffffffffffffff1661288891906148c9565b61289291906148c9565b61289c9190614906565b6fffffffffffffffffffffffffffffffff169050808a6128bc9190614827565b826128c79190613b50565b97505050505050505095945050505050565b600083156128ee57600460000154905061291a565b61271060046001015483856129039190613b50565b61290d9190614827565b6129179190614898565b90505b9392505050565b6000600b60008561ffff1661ffff168152602001908152602001600020838360405161294e929190613aa8565b908152602001604051809103902090505b600081805490501115612bc657600081600183805490506129809190614189565b81548110612991576129906141bd565b5b90600052602060002090600202016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054612a4290613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054612a6e90613af0565b8015612abb5780601f10612a9057610100808354040283529160200191612abb565b820191906000526020600020905b815481529060010190602001808311612a9e57829003601f168201915b5050505050815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16621d3567868686856020015186604001516040518663ffffffff1660e01b8152600401612b12959493929190614937565b600060405180830381600087803b158015612b2c57600080fd5b505af1158015612b40573d6000803e3d6000fd5b5050505081805480612b5557612b5461498c565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff0219169055600182016000612bbc9190612ceb565b505090555061295f565b50505050565b600080600080602285511480612be3575060428551115b612c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1990614a07565b60405180910390fd5b600285015193506022850151925060018461ffff161480612c47575060028461ffff16145b612c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7d90614a73565b60405180910390fd5b60008311612cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc090614adf565b60405180910390fd5b60028461ffff1603612ce45760428501519150605685015190505b9193509193565b508054612cf790613af0565b6000825580601f10612d095750612d28565b601f016020900490600052602060002090810190612d279190612d2b565b5b50565b5b80821115612d44576000816000905550600101612d2c565b5090565b6000819050919050565b612d5b81612d48565b82525050565b6000604082019050612d766000830185612d52565b612d836020830184612d52565b9392505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b612db581612d9e565b8114612dc057600080fd5b50565b600081359050612dd281612dac565b92915050565b600060208284031215612dee57612ded612d94565b5b6000612dfc84828501612dc3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e3082612e05565b9050919050565b612e4081612e25565b8114612e4b57600080fd5b50565b600081359050612e5d81612e37565b92915050565b600060208284031215612e7957612e78612d94565b5b6000612e8784828501612e4e565b91505092915050565b612e9981612d9e565b82525050565b6000602082019050612eb46000830184612e90565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612edf57612ede612eba565b5b8235905067ffffffffffffffff811115612efc57612efb612ebf565b5b602083019150836001820283011115612f1857612f17612ec4565b5b9250929050565b600080600060408486031215612f3857612f37612d94565b5b6000612f4686828701612dc3565b935050602084013567ffffffffffffffff811115612f6757612f66612d99565b5b612f7386828701612ec9565b92509250509250925092565b60008115159050919050565b612f9481612f7f565b82525050565b6000602082019050612faf6000830184612f8b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61300382612fba565b810181811067ffffffffffffffff8211171561302257613021612fcb565b5b80604052505050565b6000613035612d8a565b90506130418282612ffa565b919050565b600067ffffffffffffffff82111561306157613060612fcb565b5b61306a82612fba565b9050602081019050919050565b82818337600083830152505050565b600061309961309484613046565b61302b565b9050828152602081018484840111156130b5576130b4612fb5565b5b6130c0848285613077565b509392505050565b600082601f8301126130dd576130dc612eba565b5b81356130ed848260208601613086565b91505092915050565b6130ff81612d48565b811461310a57600080fd5b50565b60008135905061311c816130f6565b92915050565b60008060006060848603121561313b5761313a612d94565b5b600061314986828701612dc3565b935050602084013567ffffffffffffffff81111561316a57613169612d99565b5b613176868287016130c8565b92505060406131878682870161310d565b9150509250925092565b61319a81612e25565b82525050565b600067ffffffffffffffff82169050919050565b6131bd816131a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156131fd5780820151818401526020810190506131e2565b60008484015250505050565b6000613214826131c3565b61321e81856131ce565b935061322e8185602086016131df565b61323781612fba565b840191505092915050565b60006060820190506132576000830186613191565b61326460208301856131b4565b81810360408301526132768184613209565b9050949350505050565b6000806040838503121561329757613296612d94565b5b60006132a58582860161310d565b92505060206132b68582860161310d565b9150509250929050565b600060208201905081810360008301526132da8184613209565b905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b613307816132e2565b811461331257600080fd5b50565b600081359050613324816132fe565b92915050565b613333816131a0565b811461333e57600080fd5b50565b6000813590506133508161332a565b92915050565b600080600080600060a0868803121561337257613371612d94565b5b600061338088828901613315565b955050602061339188828901613315565b94505060406133a288828901613315565b93505060606133b388828901613341565b92505060806133c488828901613341565b9150509295509295909350565b6133da81612f7f565b81146133e557600080fd5b50565b6000813590506133f7816133d1565b92915050565b600080600080600060a0868803121561341957613418612d94565b5b600061342788828901612dc3565b955050602061343888828901612e4e565b945050604086013567ffffffffffffffff81111561345957613458612d99565b5b613465888289016130c8565b9350506060613476888289016133e8565b925050608086013567ffffffffffffffff81111561349757613496612d99565b5b6134a3888289016130c8565b9150509295509295909350565b60006020820190506134c56000830184613191565b92915050565b600080604083850312156134e2576134e1612d94565b5b60006134f085828601612dc3565b925050602083013567ffffffffffffffff81111561351157613510612d99565b5b61351d858286016130c8565b9150509250929050565b6000819050919050565b61353a81613527565b82525050565b600060608201905061355560008301866131b4565b6135626020830185613191565b61356f6040830184613531565b949350505050565b6000806040838503121561358e5761358d612d94565b5b600061359c85828601612dc3565b92505060206135ad85828601612e4e565b9150509250929050565b60006020820190506135cc60008301846131b4565b92915050565b60006020820190506135e76000830184612d52565b92915050565b6135f6816132e2565b82525050565b600060a08201905061361160008301886135ed565b61361e60208301876135ed565b61362b60408301866135ed565b61363860608301856131b4565b61364560808301846131b4565b9695505050505050565b60008060008060006060868803121561366b5761366a612d94565b5b600061367988828901612dc3565b955050602086013567ffffffffffffffff81111561369a57613699612d99565b5b6136a688828901612ec9565b9450945050604086013567ffffffffffffffff8111156136c9576136c8612d99565b5b6136d588828901612ec9565b92509250509295509295909350565b6000602082840312156136fa576136f9612d94565b5b60006137088482850161310d565b91505092915050565b6000806040838503121561372857613727612d94565b5b600061373685828601612e4e565b925050602061374785828601612e4e565b9150509250929050565b60008060008060008060008060c0898b03121561377157613770612d94565b5b600061377f8b828c01612dc3565b985050602089013567ffffffffffffffff8111156137a05761379f612d99565b5b6137ac8b828c01612ec9565b975097505060406137bf8b828c01612e4e565b95505060606137d08b828c01613341565b94505060806137e18b828c0161310d565b93505060a089013567ffffffffffffffff81111561380257613801612d99565b5b61380e8b828c01612ec9565b92509250509295985092959890939650565b600061382b82612e05565b9050919050565b61383b81613820565b811461384657600080fd5b50565b60008135905061385881613832565b92915050565b600080600080600080600060c0888a03121561387d5761387c612d94565b5b600061388b8a828b01612dc3565b975050602088013567ffffffffffffffff8111156138ac576138ab612d99565b5b6138b88a828b016130c8565b965050604088013567ffffffffffffffff8111156138d9576138d8612d99565b5b6138e58a828b01612ec9565b955095505060606138f88a828b01613849565b93505060806139098a828b01612e4e565b92505060a088013567ffffffffffffffff81111561392a57613929612d99565b5b6139368a828b016130c8565b91505092959891949750929550565b6000806000806080858703121561395f5761395e612d94565b5b600061396d87828801612dc3565b945050602061397e87828801612dc3565b935050604061398f8782880161310d565b925050606085013567ffffffffffffffff8111156139b0576139af612d99565b5b6139bc878288016130c8565b91505092959194509250565b600080600080608085870312156139e2576139e1612d94565b5b60006139f087828801612dc3565b9450506020613a0187828801612dc3565b9350506040613a1287828801612e4e565b9250506060613a238782880161310d565b91505092959194509250565b600060208284031215613a4557613a44612d94565b5b600082013567ffffffffffffffff811115613a6357613a62612d99565b5b613a6f848285016130c8565b91505092915050565b600081905092915050565b6000613a8f8385613a78565b9350613a9c838584613077565b82840190509392505050565b6000613ab5828486613a83565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b0857607f821691505b602082108103613b1b57613b1a613ac1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b5b82612d48565b9150613b6683612d48565b9250828201905080821115613b7e57613b7d613b21565b5b92915050565b600082825260208201905092915050565b7f4c617965725a65726f4d6f636b3a206e6f2073746f726564207061796c6f6164600082015250565b6000613bcb602083613b84565b9150613bd682613b95565b602082019050919050565b60006020820190508181036000830152613bfa81613bbe565b9050919050565b7f4c617965725a65726f4d6f636b3a20696e76616c69642063616c6c6572000000600082015250565b6000613c37601d83613b84565b9150613c4282613c01565b602082019050919050565b60006020820190508181036000830152613c6681613c2a565b9050919050565b6000613c7983856131ce565b9350613c86838584613077565b613c8f83612fba565b840190509392505050565b6000604082019050613caf6000830186612e90565b8181036020830152613cc2818486613c6d565b9050949350505050565b7f4c617965725a65726f4d6f636b3a20696e76616c6964207061796c6f61640000600082015250565b6000613d02601e83613b84565b9150613d0d82613ccc565b602082019050919050565b60006020820190508181036000830152613d3181613cf5565b9050919050565b6000608082019050613d4d6000830189612e90565b8181036020830152613d60818789613c6d565b9050613d6f60408301866131b4565b8181036060830152613d82818486613c6d565b9050979650505050505050565b6000608082019050613da46000830188612e90565b8181036020830152613db7818688613c6d565b9050613dc660408301856131b4565b613dd36060830184613191565b9695505050505050565b7f4c617965725a65726f4d6f636b3a206e6f2072656365697665207265656e747260008201527f616e637900000000000000000000000000000000000000000000000000000000602082015250565b6000613e39602483613b84565b9150613e4482613ddd565b604082019050919050565b60006020820190508181036000830152613e6881613e2c565b9050919050565b6000613e7a826131a0565b915067ffffffffffffffff8203613e9457613e93613b21565b5b600182019050919050565b7f4c617965725a65726f4d6f636b3a2077726f6e67206e6f6e6365000000000000600082015250565b6000613ed5601a83613b84565b9150613ee082613e9f565b602082019050919050565b60006020820190508181036000830152613f0481613ec8565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f6d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f30565b613f778683613f30565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613fb4613faf613faa84612d48565b613f8f565b612d48565b9050919050565b6000819050919050565b613fce83613f99565b613fe2613fda82613fbb565b848454613f3d565b825550505050565b600090565b613ff7613fea565b614002818484613fc5565b505050565b5b818110156140265761401b600082613fef565b600181019050614008565b5050565b601f82111561406b5761403c81613f0b565b61404584613f20565b81016020851015614054578190505b61406861406085613f20565b830182614007565b50505b505050565b600082821c905092915050565b600061408e60001984600802614070565b1980831691505092915050565b60006140a7838361407d565b9150826002028217905092915050565b6140c0826131c3565b67ffffffffffffffff8111156140d9576140d8612fcb565b5b6140e38254613af0565b6140ee82828561402a565b600060209050601f831160018114614121576000841561410f578287015190505b614119858261409b565b865550614181565b601f19841661412f86613f0b565b60005b8281101561415757848901518255600182019150602085019450602081019050614132565b868310156141745784890151614170601f89168261407d565b8355505b6001600288020188555050505b505050505050565b600061419482612d48565b915061419f83612d48565b92508282039050818111156141b7576141b6613b21565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815490506141fb81613af0565b9050919050565b8181036142105750506142e8565b614219826141ec565b67ffffffffffffffff81111561423257614231612fcb565b5b61423c8254613af0565b61424782828561402a565b6000601f8311600181146142765760008415614264578287015490505b61426e858261409b565b8655506142e1565b601f19841661428487613f0b565b965061428f86613f0b565b60005b828110156142b757848901548255600182019150600185019450602081019050614292565b868310156142d457848901546142d0601f89168261407d565b8355505b6001600288020188555050505b5050505050505b565b60006142f582612d48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361432757614326613b21565b5b600182019050919050565b600060c082019050614347600083018b612e90565b818103602083015261435a81898b613c6d565b90506143696040830188613191565b61437660608301876131b4565b8181036080830152614389818587613c6d565b905081810360a083015261439d8184613209565b90509998505050505050505050565b7f4c617965725a65726f4d6f636b3a206e6f2073656e64207265656e7472616e6360008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b6000614408602183613b84565b9150614413826143ac565b604082019050919050565b60006020820190508181036000830152614437816143fb565b9050919050565b7f4c617965725a65726f4d6f636b3a20696e636f72726563742072656d6f74652060008201527f616464726573732073697a650000000000000000000000000000000000000000602082015250565b600061449a602c83613b84565b91506144a58261443e565b604082019050919050565b600060208201905081810360008301526144c98161448d565b9050919050565b7f4c617965725a65726f4d6f636b3a2064657374696e6174696f6e204c6179657260008201527f5a65726f20456e64706f696e74206e6f7420666f756e64000000000000000000602082015250565b600061452c603783613b84565b9150614537826144d0565b604082019050919050565b6000602082019050818103600083015261455b8161451f565b9050919050565b7f4c617965725a65726f4d6f636b3a206e6f7420656e6f756768206e617469766560008201527f20666f7220666565730000000000000000000000000000000000000000000000602082015250565b60006145be602983613b84565b91506145c982614562565b604082019050919050565b600060208201905081810360008301526145ed816145b1565b9050919050565b50565b6000614604600083613a78565b915061460f826145f4565b600082019050919050565b6000614625826145f7565b9150819050919050565b60008160601b9050919050565b60006146478261462f565b9050919050565b60006146598261463c565b9050919050565b61467161466c82612e25565b61464e565b82525050565b60006146838285614660565b6014820191506146938284614660565b6014820191508190509392505050565b600060c0820190506146b86000830189612e90565b81810360208301526146ca8188613209565b90506146d96040830187613191565b6146e660608301866131b4565b6146f36080830185612d52565b81810360a08301526147058184613209565b9050979650505050505050565b60008160f01b9050919050565b600061472a82614712565b9050919050565b61474261473d82612d9e565b61471f565b82525050565b6000819050919050565b61476361475e82612d48565b614748565b82525050565b60006147758285614731565b6002820191506147858284614752565b6020820191508190509392505050565b7f4c617965725a65726f4d6f636b3a206473744e6174697665416d7420746f6f2060008201527f6c61726765200000000000000000000000000000000000000000000000000000602082015250565b60006147f1602683613b84565b91506147fc82614795565b604082019050919050565b60006020820190508181036000830152614820816147e4565b9050919050565b600061483282612d48565b915061483d83612d48565b925082820261484b81612d48565b9150828204841483151761486257614861613b21565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006148a382612d48565b91506148ae83612d48565b9250826148be576148bd614869565b5b828204905092915050565b60006148d4826132e2565b91506148df836132e2565b92508282026148ed816132e2565b91508082146148ff576148fe613b21565b5b5092915050565b6000614911826132e2565b915061491c836132e2565b92508261492c5761492b614869565b5b828204905092915050565b600060808201905061494c6000830188612e90565b818103602083015261495f818688613c6d565b905061496e60408301856131b4565b81810360608301526149808184613209565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f496e76616c69642061646170746572506172616d730000000000000000000000600082015250565b60006149f1601583613b84565b91506149fc826149bb565b602082019050919050565b60006020820190508181036000830152614a20816149e4565b9050919050565b7f556e737570706f72746564207478547970650000000000000000000000000000600082015250565b6000614a5d601283613b84565b9150614a6882614a27565b602082019050919050565b60006020820190508181036000830152614a8c81614a50565b9050919050565b7f47617320746f6f206c6f77000000000000000000000000000000000000000000600082015250565b6000614ac9600b83613b84565b9150614ad482614a93565b602082019050919050565b60006020820190508181036000830152614af881614abc565b905091905056fea2646970667358221220dfd64cb09be661b3513cfe3c5ae329f709ce8ef20ae184a2e30f85a9ce49114464736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80639924d33b11610123578063ca066b35116100ab578063e97a448a1161006f578063e97a448a1461083c578063f5ecbdbc14610867578063f9cd3ceb146108a4578063fbba623b146108cf578063fdc07c70146108f85761021a565b8063ca066b3514610769578063cbed8b9c14610794578063d23104f1146107bd578063da1a7c9a146107d4578063db14f305146108115761021a565b8063b6d9ef60116100f2578063b6d9ef6014610695578063c08f15a1146106be578063c2fa4813146106e7578063c580310014610710578063c81b383a1461072c5761021a565b80639924d33b146105b55780639c729da1146105f2578063aaff5f161461062f578063b2086499146106585761021a565b80633408e470116101a657806371ba2fd61161017557806371ba2fd61461049057806376a386dc146104cd5780637a1457481461050c5780637f6df8e614610549578063907c5e7e146105865761021a565b80633408e470146103d35780633e0dd83e146103fe57806340a7bb101461042957806342d65a8d146104675761021a565b806310ddb137116101ed57806310ddb137146102ee57806312a9ee6b14610317578063240de27714610356578063272bd3841461037f5780632c365e25146103aa5761021a565b806307d3277f1461021f57806307e0db171461024b578063096568f6146102745780630eaf6ea6146102b1575b600080fd5b34801561022b57600080fd5b50610234610935565b604051610242929190612d61565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d9190612dd8565b610947565b005b34801561028057600080fd5b5061029b60048036038101906102969190612e63565b61094a565b6040516102a89190612e9f565b60405180910390f35b3480156102bd57600080fd5b506102d860048036038101906102d39190612f1f565b610955565b6040516102e59190612f9a565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190612dd8565b6109a8565b005b34801561032357600080fd5b5061033e60048036038101906103399190613122565b6109ab565b60405161034d93929190613242565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190613280565b610ad1565b005b34801561038b57600080fd5b50610394610ae9565b6040516103a191906132c0565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc9190613356565b610b77565b005b3480156103df57600080fd5b506103e8610c8a565b6040516103f59190612e9f565b60405180910390f35b34801561040a57600080fd5b50610413610ca2565b6040516104209190612f9a565b60405180910390f35b34801561043557600080fd5b50610450600480360381019061044b91906133fd565b610cb5565b60405161045e929190612d61565b60405180910390f35b34801561047357600080fd5b5061048e60048036038101906104899190612f1f565b610db6565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612e63565b610f96565b6040516104c491906134b0565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef91906134cb565b610fa0565b60405161050393929190613540565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e9190613577565b611021565b60405161054091906135b7565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190612f1f565b611098565b60405161057d91906135d2565b60405180910390f35b34801561059257600080fd5b5061059b6110e0565b6040516105ac9594939291906135fc565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d791906134cb565b611180565b6040516105e991906135b7565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612e63565b6111cc565b60405161062691906134b0565b60405180910390f35b34801561063b57600080fd5b506106566004803603810190610651919061364f565b6111d6565b005b34801561066457600080fd5b5061067f600480360381019061067a9190613577565b61149d565b60405161068c91906135b7565b60405180910390f35b3480156106a157600080fd5b506106bc60048036038101906106b791906136e4565b6114d3565b005b3480156106ca57600080fd5b506106e560048036038101906106e09190613711565b6114dd565b005b3480156106f357600080fd5b5061070e60048036038101906107099190613751565b61155e565b005b61072a6004803603810190610725919061385e565b611f0d565b005b34801561073857600080fd5b50610753600480360381019061074e9190612e63565b612525565b60405161076091906134b0565b60405180910390f35b34801561077557600080fd5b5061077e612558565b60405161078b9190612f9a565b60405180910390f35b3480156107a057600080fd5b506107bb60048036038101906107b69190613945565b612578565b005b3480156107c957600080fd5b506107d261257e565b005b3480156107e057600080fd5b506107fb60048036038101906107f69190612e63565b61259a565b6040516108089190612e9f565b60405180910390f35b34801561081d57600080fd5b506108266125a5565b6040516108339190612e9f565b60405180910390f35b34801561084857600080fd5b506108516125b9565b60405161085e9190612f9a565b60405180910390f35b34801561087357600080fd5b5061088e600480360381019061088991906139c8565b6125d9565b60405161089b91906132c0565b60405180910390f35b3480156108b057600080fd5b506108b96125f5565b6040516108c691906135d2565b60405180910390f35b3480156108db57600080fd5b506108f660048036038101906108f19190613a2f565b6125fb565b005b34801561090457600080fd5b5061091f600480360381019061091a9190612f1f565b61260e565b60405161092c91906135b7565b60405180910390f35b60048060000154908060010154905082565b50565b600060019050919050565b600080600a60008661ffff1661ffff1681526020019081526020016000208484604051610983929190613aa8565b908152602001604051809103902090506000801b816001015414159150509392505050565b50565b600b6020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505081815481106109e957600080fd5b906000526020600020906002020160009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900467ffffffffffffffff1690806001018054610a4e90613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7a90613af0565b8015610ac75780601f10610a9c57610100808354040283529160200191610ac7565b820191906000526020600020905b815481529060010190602001808311610aaa57829003601f168201915b5050505050905083565b81600460000181905550806004600101819055505050565b60078054610af690613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290613af0565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505081565b84600260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555083600260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555082600260010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555081600260010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600260010160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050565b6000600160009054906101000a900461ffff16905090565b600160029054906101000a900460ff1681565b600080600080845111610d525760078054610ccf90613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90613af0565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050610d54565b835b90506000610d678960018a8a5186612693565b90506000610d7887836006546128d9565b905086610d885780945084610d8d565b809350835b506006548286610d9d9190613b50565b610da79190613b50565b94505050509550959350505050565b6000600a60008561ffff1661ffff1681526020019081526020016000208383604051610de3929190613aa8565b908152602001604051809103902090506000801b816001015403610e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3390613be1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590613c4d565b60405180910390fd5b60008160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000801b81600101819055507f23d2684f396e92a6e2ff2d16f98e6fea00d50cb27a64b531bc0748f730211f98848484604051610f7d93929190613c9a565b60405180910390a1610f90848484612921565b50505050565b6000309050919050565b600a60205281600052604060002081805160208101820180518482526020830160208501208183528095505050505050600091509150508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905083565b6000600960008461ffff1661ffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff16905092915050565b6000600b60008561ffff1661ffff16815260200190815260200160002083836040516110c5929190613aa8565b90815260200160405180910390208054905090509392505050565b60028060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a900467ffffffffffffffff16908060010160189054906101000a900467ffffffffffffffff16905085565b6008602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900467ffffffffffffffff1681565b6000309050919050565b6000600a60008761ffff1661ffff1681526020019081526020016000208585604051611203929190613aa8565b908152602001604051809103902090506000801b81600101540361125c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125390613be1565b60405180910390fd5b8060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16838390501480156112aa5750806001015483836040516112a0929190613aa8565b6040518091039020145b6112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e090613d18565b60405180910390fd5b60008160000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008260000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000801b82600101819055506000600860008961ffff1661ffff16815260200190815260200160002087876040516113bb929190613aa8565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff16621d3567898989858a8a6040518763ffffffff1660e01b815260040161142296959493929190613d38565b600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050507f612434f39581c8e7d99746c9c20c6eb0ce8c0eb99f007c5719d620841370957d888888848660405161148b959493929190613d8f565b60405180910390a15050505050505050565b60096020528160005260406000206020528060005260406000206000915091509054906101000a900467ffffffffffffffff1681565b8060068190555050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600160ff16600c60019054906101000a900460ff1660ff16146115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad90613e4f565b60405180910390fd5b6002600c60016101000a81548160ff021916908360ff1602179055506000600a60008a61ffff1661ffff16815260200190815260200160002088886040516115ff929190613aa8565b90815260200160405180910390209050600860008a61ffff1661ffff168152602001908152602001600020888860405161163a929190613aa8565b9081526020016040518091039020600081819054906101000a900467ffffffffffffffff1661166890613e6f565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168567ffffffffffffffff16146116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d990613eeb565b60405180910390fd5b6000801b816001015414611b2d576000600b60008b61ffff1661ffff168152602001908152602001600020898960405161171d929190613aa8565b90815260200160405180910390209050600060405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018867ffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600082805490501115611a6c578181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600101908161187391906140b7565b50505060005b6001838054905061188a9190614189565b8110156119b4578281815481106118a4576118a36141bd565b5b9060005260206000209060020201836001836118c09190613b50565b815481106118d1576118d06141bd565b5b90600052602060002090600202016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900467ffffffffffffffff168160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001820181600101908161199d9190614202565b5090505080806119ac906142ea565b915050611879565b5080826000815481106119ca576119c96141bd565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019081611a6391906140b7565b50905050611b26565b8181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019081611b2291906140b7565b5050505b5050611ee6565b600160029054906101000a900460ff1615611cc75760405180606001604052808484905067ffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018484604051611b8c929190613aa8565b6040518091039020815250600a60008b61ffff1661ffff1681526020019081526020016000208989604051611bc2929190613aa8565b908152602001604051809103902060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101559050507f0f9e4d95b62f08222d612b5ab92039cd8fbbbea550a95e8df9f927436bbdf5db8989898989888860405180602001604052806000815250604051611c9f989796959493929190614332565b60405180910390a16000600160026101000a81548160ff021916908315150217905550611ee5565b8573ffffffffffffffffffffffffffffffffffffffff16621d3567858b8b8b8a89896040518863ffffffff1660e01b8152600401611d0a96959493929190613d38565b600060405180830381600088803b158015611d2457600080fd5b5087f193505050508015611d36575060015b611ee3573d8060008114611d66576040519150601f19603f3d011682016040523d82523d6000602084013e611d6b565b606091505b5060405180606001604052808585905067ffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018585604051611db6929190613aa8565b6040518091039020815250600a60008c61ffff1661ffff1681526020019081526020016000208a8a604051611dec929190613aa8565b908152602001604051809103902060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101559050507f0f9e4d95b62f08222d612b5ab92039cd8fbbbea550a95e8df9f927436bbdf5db8a8a8a8a8a898988604051611eba989796959493929190614332565b60405180910390a16000600160026101000a81548160ff02191690831515021790555050611ee4565b5b5b5b506001600c60016101000a81548160ff021916908360ff1602179055505050505050505050565b600160ff16600c60009054906101000a900460ff1660ff1614611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5c9061441e565b60405180910390fd5b6002600c60006101000a81548160ff021916908360ff1602179055506028865114611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc906144b0565b60405180910390fd5b60006014870151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209790614542565b60405180910390fd5b60008084511161213a57600780546120b790613af0565b80601f01602080910402602001604051908101604052809291908181526020018280546120e390613af0565b80156121305780601f1061210557610100808354040283529160200191612130565b820191906000526020600020905b81548152906001019060200180831161211357829003601f168201915b505050505061213c565b835b905060006121c18b338b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141586610cb5565b50905080341015612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fe906145d4565b60405180910390fd5b6000600960008d61ffff1661ffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1661228190613e6f565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050600082346122b69190614189565b9050600081111561232b578873ffffffffffffffffffffffffffffffffffffffff16816040516122e59061461a565b60006040518083038185875af1925050503d8060008114612322576040519150601f19603f3d011682016040523d82523d6000602084013e612327565b606091505b5050505b600080600061233987612bcc565b9350935093505060008211156124015760008173ffffffffffffffffffffffffffffffffffffffff168360405161236f9061461a565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50509050806123ff57828273ffffffffffffffffffffffffffffffffffffffff167f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a360405160405180910390a35b505b6000338a604051602001612416929190614677565b604051602081830303815290604052905060008f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090508973ffffffffffffffffffffffffffffffffffffffff1663c2fa4813600160009054906101000a900461ffff16848e8b8a876040518763ffffffff1660e01b81526004016124c3969594939291906146a3565b600060405180830381600087803b1580156124dd57600080fd5b505af11580156124f1573d6000803e3d6000fd5b5050505050505050505050505050506001600c60006101000a81548160ff021916908360ff16021790555050505050505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260ff16600c60019054906101000a900460ff1660ff1614905090565b50505050565b60018060026101000a81548160ff021916908315150217905550565b600060019050919050565b600160009054906101000a900461ffff1681565b6000600260ff16600c60009054906101000a900460ff1660ff1614905090565b6060604051806020016040528060008152509050949350505050565b60065481565b806007908161260a91906140b7565b5050565b6000600860008561ffff1661ffff168152602001908152602001600020838360405161263b929190613aa8565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1690509392505050565b606060018260405160200161267d929190614769565b6040516020818303038152906040529050919050565b6000806000806126a285612bcc565b50925092509250600060028461ffff160361273c5781600260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16101561272d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272490614807565b60405180910390fd5b81816127399190613b50565b90505b600083600260010160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661276d9190613b50565b600260000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166127ab9190614827565b905080826127b99190613b50565b915060006402540be400600260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16846128029190614827565b61280c9190614898565b905060006402540be400600260000160009054906101000a90046fffffffffffffffffffffffffffffffff16600260010160189054906101000a900467ffffffffffffffff1667ffffffffffffffff16600260000160109054906101000a90046fffffffffffffffffffffffffffffffff1661288891906148c9565b61289291906148c9565b61289c9190614906565b6fffffffffffffffffffffffffffffffff169050808a6128bc9190614827565b826128c79190613b50565b97505050505050505095945050505050565b600083156128ee57600460000154905061291a565b61271060046001015483856129039190613b50565b61290d9190614827565b6129179190614898565b90505b9392505050565b6000600b60008561ffff1661ffff168152602001908152602001600020838360405161294e929190613aa8565b908152602001604051809103902090505b600081805490501115612bc657600081600183805490506129809190614189565b81548110612991576129906141bd565b5b90600052602060002090600202016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054612a4290613af0565b80601f0160208091040260200160405190810160405280929190818152602001828054612a6e90613af0565b8015612abb5780601f10612a9057610100808354040283529160200191612abb565b820191906000526020600020905b815481529060010190602001808311612a9e57829003601f168201915b5050505050815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16621d3567868686856020015186604001516040518663ffffffff1660e01b8152600401612b12959493929190614937565b600060405180830381600087803b158015612b2c57600080fd5b505af1158015612b40573d6000803e3d6000fd5b5050505081805480612b5557612b5461498c565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff0219169055600182016000612bbc9190612ceb565b505090555061295f565b50505050565b600080600080602285511480612be3575060428551115b612c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1990614a07565b60405180910390fd5b600285015193506022850151925060018461ffff161480612c47575060028461ffff16145b612c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7d90614a73565b60405180910390fd5b60008311612cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc090614adf565b60405180910390fd5b60028461ffff1603612ce45760428501519150605685015190505b9193509193565b508054612cf790613af0565b6000825580601f10612d095750612d28565b601f016020900490600052602060002090810190612d279190612d2b565b5b50565b5b80821115612d44576000816000905550600101612d2c565b5090565b6000819050919050565b612d5b81612d48565b82525050565b6000604082019050612d766000830185612d52565b612d836020830184612d52565b9392505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b612db581612d9e565b8114612dc057600080fd5b50565b600081359050612dd281612dac565b92915050565b600060208284031215612dee57612ded612d94565b5b6000612dfc84828501612dc3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e3082612e05565b9050919050565b612e4081612e25565b8114612e4b57600080fd5b50565b600081359050612e5d81612e37565b92915050565b600060208284031215612e7957612e78612d94565b5b6000612e8784828501612e4e565b91505092915050565b612e9981612d9e565b82525050565b6000602082019050612eb46000830184612e90565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612edf57612ede612eba565b5b8235905067ffffffffffffffff811115612efc57612efb612ebf565b5b602083019150836001820283011115612f1857612f17612ec4565b5b9250929050565b600080600060408486031215612f3857612f37612d94565b5b6000612f4686828701612dc3565b935050602084013567ffffffffffffffff811115612f6757612f66612d99565b5b612f7386828701612ec9565b92509250509250925092565b60008115159050919050565b612f9481612f7f565b82525050565b6000602082019050612faf6000830184612f8b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61300382612fba565b810181811067ffffffffffffffff8211171561302257613021612fcb565b5b80604052505050565b6000613035612d8a565b90506130418282612ffa565b919050565b600067ffffffffffffffff82111561306157613060612fcb565b5b61306a82612fba565b9050602081019050919050565b82818337600083830152505050565b600061309961309484613046565b61302b565b9050828152602081018484840111156130b5576130b4612fb5565b5b6130c0848285613077565b509392505050565b600082601f8301126130dd576130dc612eba565b5b81356130ed848260208601613086565b91505092915050565b6130ff81612d48565b811461310a57600080fd5b50565b60008135905061311c816130f6565b92915050565b60008060006060848603121561313b5761313a612d94565b5b600061314986828701612dc3565b935050602084013567ffffffffffffffff81111561316a57613169612d99565b5b613176868287016130c8565b92505060406131878682870161310d565b9150509250925092565b61319a81612e25565b82525050565b600067ffffffffffffffff82169050919050565b6131bd816131a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156131fd5780820151818401526020810190506131e2565b60008484015250505050565b6000613214826131c3565b61321e81856131ce565b935061322e8185602086016131df565b61323781612fba565b840191505092915050565b60006060820190506132576000830186613191565b61326460208301856131b4565b81810360408301526132768184613209565b9050949350505050565b6000806040838503121561329757613296612d94565b5b60006132a58582860161310d565b92505060206132b68582860161310d565b9150509250929050565b600060208201905081810360008301526132da8184613209565b905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b613307816132e2565b811461331257600080fd5b50565b600081359050613324816132fe565b92915050565b613333816131a0565b811461333e57600080fd5b50565b6000813590506133508161332a565b92915050565b600080600080600060a0868803121561337257613371612d94565b5b600061338088828901613315565b955050602061339188828901613315565b94505060406133a288828901613315565b93505060606133b388828901613341565b92505060806133c488828901613341565b9150509295509295909350565b6133da81612f7f565b81146133e557600080fd5b50565b6000813590506133f7816133d1565b92915050565b600080600080600060a0868803121561341957613418612d94565b5b600061342788828901612dc3565b955050602061343888828901612e4e565b945050604086013567ffffffffffffffff81111561345957613458612d99565b5b613465888289016130c8565b9350506060613476888289016133e8565b925050608086013567ffffffffffffffff81111561349757613496612d99565b5b6134a3888289016130c8565b9150509295509295909350565b60006020820190506134c56000830184613191565b92915050565b600080604083850312156134e2576134e1612d94565b5b60006134f085828601612dc3565b925050602083013567ffffffffffffffff81111561351157613510612d99565b5b61351d858286016130c8565b9150509250929050565b6000819050919050565b61353a81613527565b82525050565b600060608201905061355560008301866131b4565b6135626020830185613191565b61356f6040830184613531565b949350505050565b6000806040838503121561358e5761358d612d94565b5b600061359c85828601612dc3565b92505060206135ad85828601612e4e565b9150509250929050565b60006020820190506135cc60008301846131b4565b92915050565b60006020820190506135e76000830184612d52565b92915050565b6135f6816132e2565b82525050565b600060a08201905061361160008301886135ed565b61361e60208301876135ed565b61362b60408301866135ed565b61363860608301856131b4565b61364560808301846131b4565b9695505050505050565b60008060008060006060868803121561366b5761366a612d94565b5b600061367988828901612dc3565b955050602086013567ffffffffffffffff81111561369a57613699612d99565b5b6136a688828901612ec9565b9450945050604086013567ffffffffffffffff8111156136c9576136c8612d99565b5b6136d588828901612ec9565b92509250509295509295909350565b6000602082840312156136fa576136f9612d94565b5b60006137088482850161310d565b91505092915050565b6000806040838503121561372857613727612d94565b5b600061373685828601612e4e565b925050602061374785828601612e4e565b9150509250929050565b60008060008060008060008060c0898b03121561377157613770612d94565b5b600061377f8b828c01612dc3565b985050602089013567ffffffffffffffff8111156137a05761379f612d99565b5b6137ac8b828c01612ec9565b975097505060406137bf8b828c01612e4e565b95505060606137d08b828c01613341565b94505060806137e18b828c0161310d565b93505060a089013567ffffffffffffffff81111561380257613801612d99565b5b61380e8b828c01612ec9565b92509250509295985092959890939650565b600061382b82612e05565b9050919050565b61383b81613820565b811461384657600080fd5b50565b60008135905061385881613832565b92915050565b600080600080600080600060c0888a03121561387d5761387c612d94565b5b600061388b8a828b01612dc3565b975050602088013567ffffffffffffffff8111156138ac576138ab612d99565b5b6138b88a828b016130c8565b965050604088013567ffffffffffffffff8111156138d9576138d8612d99565b5b6138e58a828b01612ec9565b955095505060606138f88a828b01613849565b93505060806139098a828b01612e4e565b92505060a088013567ffffffffffffffff81111561392a57613929612d99565b5b6139368a828b016130c8565b91505092959891949750929550565b6000806000806080858703121561395f5761395e612d94565b5b600061396d87828801612dc3565b945050602061397e87828801612dc3565b935050604061398f8782880161310d565b925050606085013567ffffffffffffffff8111156139b0576139af612d99565b5b6139bc878288016130c8565b91505092959194509250565b600080600080608085870312156139e2576139e1612d94565b5b60006139f087828801612dc3565b9450506020613a0187828801612dc3565b9350506040613a1287828801612e4e565b9250506060613a238782880161310d565b91505092959194509250565b600060208284031215613a4557613a44612d94565b5b600082013567ffffffffffffffff811115613a6357613a62612d99565b5b613a6f848285016130c8565b91505092915050565b600081905092915050565b6000613a8f8385613a78565b9350613a9c838584613077565b82840190509392505050565b6000613ab5828486613a83565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b0857607f821691505b602082108103613b1b57613b1a613ac1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b5b82612d48565b9150613b6683612d48565b9250828201905080821115613b7e57613b7d613b21565b5b92915050565b600082825260208201905092915050565b7f4c617965725a65726f4d6f636b3a206e6f2073746f726564207061796c6f6164600082015250565b6000613bcb602083613b84565b9150613bd682613b95565b602082019050919050565b60006020820190508181036000830152613bfa81613bbe565b9050919050565b7f4c617965725a65726f4d6f636b3a20696e76616c69642063616c6c6572000000600082015250565b6000613c37601d83613b84565b9150613c4282613c01565b602082019050919050565b60006020820190508181036000830152613c6681613c2a565b9050919050565b6000613c7983856131ce565b9350613c86838584613077565b613c8f83612fba565b840190509392505050565b6000604082019050613caf6000830186612e90565b8181036020830152613cc2818486613c6d565b9050949350505050565b7f4c617965725a65726f4d6f636b3a20696e76616c6964207061796c6f61640000600082015250565b6000613d02601e83613b84565b9150613d0d82613ccc565b602082019050919050565b60006020820190508181036000830152613d3181613cf5565b9050919050565b6000608082019050613d4d6000830189612e90565b8181036020830152613d60818789613c6d565b9050613d6f60408301866131b4565b8181036060830152613d82818486613c6d565b9050979650505050505050565b6000608082019050613da46000830188612e90565b8181036020830152613db7818688613c6d565b9050613dc660408301856131b4565b613dd36060830184613191565b9695505050505050565b7f4c617965725a65726f4d6f636b3a206e6f2072656365697665207265656e747260008201527f616e637900000000000000000000000000000000000000000000000000000000602082015250565b6000613e39602483613b84565b9150613e4482613ddd565b604082019050919050565b60006020820190508181036000830152613e6881613e2c565b9050919050565b6000613e7a826131a0565b915067ffffffffffffffff8203613e9457613e93613b21565b5b600182019050919050565b7f4c617965725a65726f4d6f636b3a2077726f6e67206e6f6e6365000000000000600082015250565b6000613ed5601a83613b84565b9150613ee082613e9f565b602082019050919050565b60006020820190508181036000830152613f0481613ec8565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f6d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f30565b613f778683613f30565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613fb4613faf613faa84612d48565b613f8f565b612d48565b9050919050565b6000819050919050565b613fce83613f99565b613fe2613fda82613fbb565b848454613f3d565b825550505050565b600090565b613ff7613fea565b614002818484613fc5565b505050565b5b818110156140265761401b600082613fef565b600181019050614008565b5050565b601f82111561406b5761403c81613f0b565b61404584613f20565b81016020851015614054578190505b61406861406085613f20565b830182614007565b50505b505050565b600082821c905092915050565b600061408e60001984600802614070565b1980831691505092915050565b60006140a7838361407d565b9150826002028217905092915050565b6140c0826131c3565b67ffffffffffffffff8111156140d9576140d8612fcb565b5b6140e38254613af0565b6140ee82828561402a565b600060209050601f831160018114614121576000841561410f578287015190505b614119858261409b565b865550614181565b601f19841661412f86613f0b565b60005b8281101561415757848901518255600182019150602085019450602081019050614132565b868310156141745784890151614170601f89168261407d565b8355505b6001600288020188555050505b505050505050565b600061419482612d48565b915061419f83612d48565b92508282039050818111156141b7576141b6613b21565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815490506141fb81613af0565b9050919050565b8181036142105750506142e8565b614219826141ec565b67ffffffffffffffff81111561423257614231612fcb565b5b61423c8254613af0565b61424782828561402a565b6000601f8311600181146142765760008415614264578287015490505b61426e858261409b565b8655506142e1565b601f19841661428487613f0b565b965061428f86613f0b565b60005b828110156142b757848901548255600182019150600185019450602081019050614292565b868310156142d457848901546142d0601f89168261407d565b8355505b6001600288020188555050505b5050505050505b565b60006142f582612d48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361432757614326613b21565b5b600182019050919050565b600060c082019050614347600083018b612e90565b818103602083015261435a81898b613c6d565b90506143696040830188613191565b61437660608301876131b4565b8181036080830152614389818587613c6d565b905081810360a083015261439d8184613209565b90509998505050505050505050565b7f4c617965725a65726f4d6f636b3a206e6f2073656e64207265656e7472616e6360008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b6000614408602183613b84565b9150614413826143ac565b604082019050919050565b60006020820190508181036000830152614437816143fb565b9050919050565b7f4c617965725a65726f4d6f636b3a20696e636f72726563742072656d6f74652060008201527f616464726573732073697a650000000000000000000000000000000000000000602082015250565b600061449a602c83613b84565b91506144a58261443e565b604082019050919050565b600060208201905081810360008301526144c98161448d565b9050919050565b7f4c617965725a65726f4d6f636b3a2064657374696e6174696f6e204c6179657260008201527f5a65726f20456e64706f696e74206e6f7420666f756e64000000000000000000602082015250565b600061452c603783613b84565b9150614537826144d0565b604082019050919050565b6000602082019050818103600083015261455b8161451f565b9050919050565b7f4c617965725a65726f4d6f636b3a206e6f7420656e6f756768206e617469766560008201527f20666f7220666565730000000000000000000000000000000000000000000000602082015250565b60006145be602983613b84565b91506145c982614562565b604082019050919050565b600060208201905081810360008301526145ed816145b1565b9050919050565b50565b6000614604600083613a78565b915061460f826145f4565b600082019050919050565b6000614625826145f7565b9150819050919050565b60008160601b9050919050565b60006146478261462f565b9050919050565b60006146598261463c565b9050919050565b61467161466c82612e25565b61464e565b82525050565b60006146838285614660565b6014820191506146938284614660565b6014820191508190509392505050565b600060c0820190506146b86000830189612e90565b81810360208301526146ca8188613209565b90506146d96040830187613191565b6146e660608301866131b4565b6146f36080830185612d52565b81810360a08301526147058184613209565b9050979650505050505050565b60008160f01b9050919050565b600061472a82614712565b9050919050565b61474261473d82612d9e565b61471f565b82525050565b6000819050919050565b61476361475e82612d48565b614748565b82525050565b60006147758285614731565b6002820191506147858284614752565b6020820191508190509392505050565b7f4c617965725a65726f4d6f636b3a206473744e6174697665416d7420746f6f2060008201527f6c61726765200000000000000000000000000000000000000000000000000000602082015250565b60006147f1602683613b84565b91506147fc82614795565b604082019050919050565b60006020820190508181036000830152614820816147e4565b9050919050565b600061483282612d48565b915061483d83612d48565b925082820261484b81612d48565b9150828204841483151761486257614861613b21565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006148a382612d48565b91506148ae83612d48565b9250826148be576148bd614869565b5b828204905092915050565b60006148d4826132e2565b91506148df836132e2565b92508282026148ed816132e2565b91508082146148ff576148fe613b21565b5b5092915050565b6000614911826132e2565b915061491c836132e2565b92508261492c5761492b614869565b5b828204905092915050565b600060808201905061494c6000830188612e90565b818103602083015261495f818688613c6d565b905061496e60408301856131b4565b81810360608301526149808184613209565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f496e76616c69642061646170746572506172616d730000000000000000000000600082015250565b60006149f1601583613b84565b91506149fc826149bb565b602082019050919050565b60006020820190508181036000830152614a20816149e4565b9050919050565b7f556e737570706f72746564207478547970650000000000000000000000000000600082015250565b6000614a5d601283613b84565b9150614a6882614a27565b602082019050919050565b60006020820190508181036000830152614a8c81614a50565b9050919050565b7f47617320746f6f206c6f77000000000000000000000000000000000000000000600082015250565b6000614ac9600b83613b84565b9150614ad482614a93565b602082019050919050565b60006020820190508181036000830152614af881614abc565b905091905056fea2646970667358221220dfd64cb09be661b3513cfe3c5ae329f709ce8ef20ae184a2e30f85a9ce49114464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "lzEndpointLookup",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 448,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "mockChainId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 450,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "nextMsgBlocked",
        "offset": 2,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 453,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "relayerFeeConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(RelayerFeeConfig)509_storage"
      },
      {
        "astId": 456,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "protocolFeeConfig",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(ProtocolFeeConfig)498_storage"
      },
      {
        "astId": 458,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "oracleFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "defaultAdapterParams",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes_storage"
      },
      {
        "astId": 466,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "inboundNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_uint64))"
      },
      {
        "astId": 472,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "outboundNonce",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_uint64))"
      },
      {
        "astId": 479,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "storedPayload",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_struct(StoredPayload)516_storage))"
      },
      {
        "astId": 487,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "msgsToDeliver",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_array(t_struct(QueuedPayload)523_storage)dyn_storage))"
      },
      {
        "astId": 490,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "_send_entered_state",
        "offset": 0,
        "slot": "12",
        "type": "t_uint8"
      },
      {
        "astId": 493,
        "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
        "label": "_receive_entered_state",
        "offset": 1,
        "slot": "12",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(QueuedPayload)523_storage)dyn_storage": {
        "base": "t_struct(QueuedPayload)523_storage",
        "encoding": "dynamic_array",
        "label": "struct LZEndpointMock.QueuedPayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes_memory_ptr,t_array(t_struct(QueuedPayload)523_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct LZEndpointMock.QueuedPayload[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(QueuedPayload)523_storage)dyn_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(StoredPayload)516_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct LZEndpointMock.StoredPayload)",
        "numberOfBytes": "32",
        "value": "t_struct(StoredPayload)516_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_array(t_struct(QueuedPayload)523_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => struct LZEndpointMock.QueuedPayload[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_array(t_struct(QueuedPayload)523_storage)dyn_storage)"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_struct(StoredPayload)516_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => struct LZEndpointMock.StoredPayload))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_struct(StoredPayload)516_storage)"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_uint64)"
      },
      "t_struct(ProtocolFeeConfig)498_storage": {
        "encoding": "inplace",
        "label": "struct LZEndpointMock.ProtocolFeeConfig",
        "members": [
          {
            "astId": 495,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "zroFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 497,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "nativeBP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(QueuedPayload)523_storage": {
        "encoding": "inplace",
        "label": "struct LZEndpointMock.QueuedPayload",
        "members": [
          {
            "astId": 518,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "dstAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 520,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "nonce",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 522,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "payload",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RelayerFeeConfig)509_storage": {
        "encoding": "inplace",
        "label": "struct LZEndpointMock.RelayerFeeConfig",
        "members": [
          {
            "astId": 500,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "dstPriceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 502,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "dstGasPriceInWei",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 504,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "dstNativeAmtCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 506,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "baseGas",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 508,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StoredPayload)516_storage": {
        "encoding": "inplace",
        "label": "struct LZEndpointMock.StoredPayload",
        "members": [
          {
            "astId": 511,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "payloadLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 513,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "dstAddress",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 515,
            "contract": "contracts/mocks/LZEndpointMock.sol:LZEndpointMock",
            "label": "payloadHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}